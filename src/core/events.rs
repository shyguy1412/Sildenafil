//AUTOGENERATED: DO NOT EDIT MANUALLY
use bondage::*;

#[derive(Clone, Debug)]
#[allow(non_snake_case)]
pub struct EventMap {
  RestockVehicle:Option<RestockVehicle>,
  DropshipDeploy:Option<DropshipDeploy>,
  Docked:Option<Docked>,
  Progress:Option<Progress>,
  DockingRequested:Option<DockingRequested>,
  ApproachSettlement:Option<ApproachSettlement>,
  MaterialDiscovered:Option<MaterialDiscovered>,
  FighterRebuilt:Option<FighterRebuilt>,
  DockSRV:Option<DockSRV>,
  CrewLaunchFighter:Option<CrewLaunchFighter>,
  ColonisationSystemClaim:Option<ColonisationSystemClaim>,
  PowerplaySalary:Option<PowerplaySalary>,
  FighterDestroyed:Option<FighterDestroyed>,
  SAASignalsFound:Option<SAASignalsFound>,
  BookDropship:Option<BookDropship>,
  LaunchFighter:Option<LaunchFighter>,
  BackpackChange:Option<BackpackChange>,
  CrimeVictim:Option<CrimeVictim>,
  Location:Option<Location>,
  UnderAttack:Option<UnderAttack>,
  USSDrop:Option<USSDrop>,
  NavRoute:Option<NavRoute>,
  MissionAccepted:Option<MissionAccepted>,
  Rank:Option<Rank>,
  AppliedToSquadron:Option<AppliedToSquadron>,
  PowerplayCollect:Option<PowerplayCollect>,
  MultiSellExplorationData:Option<MultiSellExplorationData>,
  SellOrganicData:Option<SellOrganicData>,
  ColonisationConstructionDepot:Option<ColonisationConstructionDepot>,
  ModuleSellRemote:Option<ModuleSellRemote>,
  Repair:Option<Repair>,
  FuelScoop:Option<FuelScoop>,
  RepairDrone:Option<RepairDrone>,
  Fileheader:Option<Fileheader>,
  CancelTaxi:Option<CancelTaxi>,
  NavBeaconScan:Option<NavBeaconScan>,
  SquadronDemotion:Option<SquadronDemotion>,
  ModuleRetrieve:Option<ModuleRetrieve>,
  Interdiction:Option<Interdiction>,
  ShipLocker:Option<ShipLocker>,
  HeatWarning:Option<HeatWarning>,
  CarrierCrewServices:Option<CarrierCrewServices>,
  CarrierShipPack:Option<CarrierShipPack>,
  Synthesis:Option<Synthesis>,
  CarrierFinance:Option<CarrierFinance>,
  ProspectedAsteroid:Option<ProspectedAsteroid>,
  SellShipOnRebuy:Option<SellShipOnRebuy>,
  SellDrones:Option<SellDrones>,
  WingAdd:Option<WingAdd>,
  CarrierDepositFuel:Option<CarrierDepositFuel>,
  Interdicted:Option<Interdicted>,
  SupercruiseExit:Option<SupercruiseExit>,
  SellWeapon:Option<SellWeapon>,
  BuyTradeData:Option<BuyTradeData>,
  DeliverPowerMicroResources:Option<DeliverPowerMicroResources>,
  StoredModules:Option<StoredModules>,
  SRVDestroyed:Option<SRVDestroyed>,
  FSSBodySignals:Option<FSSBodySignals>,
  MissionRedirected:Option<MissionRedirected>,
  QuitACrew:Option<QuitACrew>,
  ShipyardNew:Option<ShipyardNew>,
  ShipyardTransfer:Option<ShipyardTransfer>,
  ShipLockerMaterials:Option<ShipLockerMaterials>,
  NpcCrewRank:Option<NpcCrewRank>,
  ModuleBuyAndStore:Option<ModuleBuyAndStore>,
  CancelledSquadronApplication:Option<CancelledSquadronApplication>,
  Died:Option<Died>,
  BuyWeapon:Option<BuyWeapon>,
  CrewMemberRoleChange:Option<CrewMemberRoleChange>,
  PowerplayJoin:Option<PowerplayJoin>,
  ModuleInfo:Option<ModuleInfo>,
  CrewHire:Option<CrewHire>,
  BuyMicroResources:Option<BuyMicroResources>,
  ShipyardSell:Option<ShipyardSell>,
  FSSDiscoveryScan:Option<FSSDiscoveryScan>,
  Disembark:Option<Disembark>,
  SupercruiseDestinationDrop:Option<SupercruiseDestinationDrop>,
  ModuleSwap:Option<ModuleSwap>,
  Promotion:Option<Promotion>,
  BuyAmmo:Option<BuyAmmo>,
  Powerplay:Option<Powerplay>,
  Shipyard:Option<Shipyard>,
  SquadronApplicationApproved:Option<SquadronApplicationApproved>,
  PowerplayLeave:Option<PowerplayLeave>,
  Embark:Option<Embark>,
  ShipRedeemed:Option<ShipRedeemed>,
  CodexEntry:Option<CodexEntry>,
  DockFighter:Option<DockFighter>,
  RedeemVoucher:Option<RedeemVoucher>,
  ScanBaryCentre:Option<ScanBaryCentre>,
  CarrierCancelDecommission:Option<CarrierCancelDecommission>,
  TransferMicroResources:Option<TransferMicroResources>,
  ModuleBuy:Option<ModuleBuy>,
  LoadoutRemoveModule:Option<LoadoutRemoveModule>,
  DatalinkScan:Option<DatalinkScan>,
  MassModuleStore:Option<MassModuleStore>,
  Reputation:Option<Reputation>,
  CrewMemberJoins:Option<CrewMemberJoins>,
  MarketBuy:Option<MarketBuy>,
  SAAScanComplete:Option<SAAScanComplete>,
  Scanned:Option<Scanned>,
  Backpack:Option<Backpack>,
  HoloscreenHacked:Option<HoloscreenHacked>,
  ScanOrganic:Option<ScanOrganic>,
  Bounty:Option<Bounty>,
  DockingTimeout:Option<DockingTimeout>,
  JetConeDamage:Option<JetConeDamage>,
  SelfDestruct:Option<SelfDestruct>,
  CollectCargo:Option<CollectCargo>,
  SquadronStartup:Option<SquadronStartup>,
  EscapeInterdiction:Option<EscapeInterdiction>,
  SquadronPromotion:Option<SquadronPromotion>,
  VehicleSwitch:Option<VehicleSwitch>,
  FactionKillBond:Option<FactionKillBond>,
  ShipyardBankDeposit:Option<ShipyardBankDeposit>,
  RebootRepair:Option<RebootRepair>,
  Outfitting:Option<Outfitting>,
  RefuelPartial:Option<RefuelPartial>,
  CarrierLocation:Option<CarrierLocation>,
  AsteroidCracked:Option<AsteroidCracked>,
  CreateSuitLoadout:Option<CreateSuitLoadout>,
  BuyDrones:Option<BuyDrones>,
  ModuleStore:Option<ModuleStore>,
  DockingGranted:Option<DockingGranted>,
  SuitLoadout:Option<SuitLoadout>,
  Friends:Option<Friends>,
  FSDJump:Option<FSDJump>,
  MissionCompleted:Option<MissionCompleted>,
  CommunityGoal:Option<CommunityGoal>,
  Cargo:Option<Cargo>,
  JoinACrew:Option<JoinACrew>,
  EjectCargo:Option<EjectCargo>,
  CrewFire:Option<CrewFire>,
  StartJump:Option<StartJump>,
  CargoDepot:Option<CargoDepot>,
  PowerplayRank:Option<PowerplayRank>,
  MarketSell:Option<MarketSell>,
  Materials:Option<Materials>,
  SquadronApplicationRejected:Option<SquadronApplicationRejected>,
  CarrierStats:Option<CarrierStats>,
  MissionAbandoned:Option<MissionAbandoned>,
  UpgradeSuit:Option<UpgradeSuit>,
  LeaveBody:Option<LeaveBody>,
  MaterialTrade:Option<MaterialTrade>,
  JetConeBoost:Option<JetConeBoost>,
  BookTaxi:Option<BookTaxi>,
  MiningRefined:Option<MiningRefined>,
  Scan:Option<Scan>,
  FCMaterials:Option<FCMaterials>,
  SystemsShutdown:Option<SystemsShutdown>,
  DropItems:Option<DropItems>,
  LaunchSRV:Option<LaunchSRV>,
  EngineerContribution:Option<EngineerContribution>,
  Music:Option<Music>,
  SellMicroResources:Option<SellMicroResources>,
  DisbandedSquadron:Option<DisbandedSquadron>,
  RequestPowerMicroResources:Option<RequestPowerMicroResources>,
  Missions:Option<Missions>,
  ReservoirReplenished:Option<ReservoirReplenished>,
  DiscoveryScan:Option<DiscoveryScan>,
  UpgradeWeapon:Option<UpgradeWeapon>,
  Touchdown:Option<Touchdown>,
  CockpitBreached:Option<CockpitBreached>,
  DeleteSuitLoadout:Option<DeleteSuitLoadout>,
  Resurrect:Option<Resurrect>,
  CarrierJumpRequest:Option<CarrierJumpRequest>,
  Status:Option<Status>,
  ScientificResearch:Option<ScientificResearch>,
  FSDTarget:Option<FSDTarget>,
  ShipTargeted:Option<ShipTargeted>,
  ShipyardBuy:Option<ShipyardBuy>,
  NavRouteClear:Option<NavRouteClear>,
  CapShipBond:Option<CapShipBond>,
  SetUserShipName:Option<SetUserShipName>,
  ShipyardRedeem:Option<ShipyardRedeem>,
  Passengers:Option<Passengers>,
  FSSSignalDiscovered:Option<FSSSignalDiscovered>,
  ChangeCrewRole:Option<ChangeCrewRole>,
  EngineerCraft:Option<EngineerCraft>,
  UseConsumable:Option<UseConsumable>,
  Commander:Option<Commander>,
  PowerplayDefect:Option<PowerplayDefect>,
  MissionFailed:Option<MissionFailed>,
  CommitCrime:Option<CommitCrime>,
  SwitchSuitLoadout:Option<SwitchSuitLoadout>,
  ClearSavedGame:Option<ClearSavedGame>,
  CarrierModulePack:Option<CarrierModulePack>,
  InvitedToSquadron:Option<InvitedToSquadron>,
  PowerplayVoucher:Option<PowerplayVoucher>,
  NpcCrewPaidWage:Option<NpcCrewPaidWage>,
  SendText:Option<SendText>,
  LeftSquadron:Option<LeftSquadron>,
  Continued:Option<Continued>,
  PVPKill:Option<PVPKill>,
  ClearImpound:Option<ClearImpound>,
  ColonisationSystemClaimRelease:Option<ColonisationSystemClaimRelease>,
  CommunityGoalJoin:Option<CommunityGoalJoin>,
  RepairAll:Option<RepairAll>,
  PowerplayDeliver:Option<PowerplayDeliver>,
  Liftoff:Option<Liftoff>,
  HullDamage:Option<HullDamage>,
  Resupply:Option<Resupply>,
  SharedBookmarkToSquadron:Option<SharedBookmarkToSquadron>,
  ReceiveText:Option<ReceiveText>,
  DataScanned:Option<DataScanned>,
  SellSuit:Option<SellSuit>,
  HeatDamage:Option<HeatDamage>,
  FetchRemoteModule:Option<FetchRemoteModule>,
  CarrierDecommission:Option<CarrierDecommission>,
  CargoTransfer:Option<CargoTransfer>,
  PowerplayMerits:Option<PowerplayMerits>,
  PayBounties:Option<PayBounties>,
  SellExplorationData:Option<SellExplorationData>,
  CarrierBankTransfer:Option<CarrierBankTransfer>,
  CrewAssign:Option<CrewAssign>,
  ColonisationBeaconDeployed:Option<ColonisationBeaconDeployed>,
  ApproachBody:Option<ApproachBody>,
  SupercruiseEntry:Option<SupercruiseEntry>,
  DatalinkVoucher:Option<DatalinkVoucher>,
  BuySuit:Option<BuySuit>,
  ShipyardSwap:Option<ShipyardSwap>,
  EndCrewSession:Option<EndCrewSession>,
  PowerplayVote:Option<PowerplayVote>,
  MaterialDiscarded:Option<MaterialDiscarded>,
  AfmuRepairs:Option<AfmuRepairs>,
  KickCrewMember:Option<KickCrewMember>,
  CarrierBuy:Option<CarrierBuy>,
  ShieldState:Option<ShieldState>,
  MaterialCollected:Option<MaterialCollected>,
  PayFines:Option<PayFines>,
  ModuleSell:Option<ModuleSell>,
  LoadoutEquipModule:Option<LoadoutEquipModule>,
  CollectItems:Option<CollectItems>,
  EngineerProgress:Option<EngineerProgress>,
  NewCommander:Option<NewCommander>,
  CommunityGoalDiscard:Option<CommunityGoalDiscard>,
  StoredShips:Option<StoredShips>,
  CrewMemberQuits:Option<CrewMemberQuits>,
  CarrierNameChange:Option<CarrierNameChange>,
  RefuelAll:Option<RefuelAll>,
  BuyExplorationData:Option<BuyExplorationData>,
  CarrierDockingPermission:Option<CarrierDockingPermission>,
  CarrierJumpCancelled:Option<CarrierJumpCancelled>,
  EngineerLegacyConvert:Option<EngineerLegacyConvert>,
  CarrierJump:Option<CarrierJump>,
  LoadGame:Option<LoadGame>,
  SquadronCreated:Option<SquadronCreated>,
  RenameSuitLoadout:Option<RenameSuitLoadout>,
  Market:Option<Market>,
  PowerplayFastTrack:Option<PowerplayFastTrack>,
  WingInvite:Option<WingInvite>,
  SearchAndRescue:Option<SearchAndRescue>,
  Statistics:Option<Statistics>,
  DockingDenied:Option<DockingDenied>,
  ColonisationContribution:Option<ColonisationContribution>,
  CarrierTradeOrder:Option<CarrierTradeOrder>,
  FSSAllBodiesFound:Option<FSSAllBodiesFound>,
  WingJoin:Option<WingJoin>,
  TradeMicroResources:Option<TradeMicroResources>,
  CommunityGoalReward:Option<CommunityGoalReward>,
  Shutdown:Option<Shutdown>,
  Screenshot:Option<Screenshot>,
  DockingCancelled:Option<DockingCancelled>,
  WingLeave:Option<WingLeave>,
  TechnologyBroker:Option<TechnologyBroker>,
  JoinedSquadron:Option<JoinedSquadron>,
  Undocked:Option<Undocked>,
  CancelDropship:Option<CancelDropship>,
  Loadout:Option<Loadout>,
  KickedFromSquadron:Option<KickedFromSquadron>,
  LaunchDrone:Option<LaunchDrone>,

}
#[derive(Clone, Debug, Event)]
#[event_name("RestockVehicle")]
#[allow(non_snake_case)]
pub struct RestockVehicle {  
  timestamp: String,
  event: String,
  Type: String,
  Type_Localised: Option<String>,
  Loadout: String,
  ID: Option<f64>,
  Cost: f64,
  Count: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("DropshipDeploy")]
#[allow(non_snake_case)]
pub struct DropshipDeploy {  
  timestamp: String,
  event: String,
  StarSystem: String,
  SystemAddress: f64,
  Body: String,
  BodyID: f64,
  OnStation: bool,
  OnPlanet: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("Docked")]
#[allow(non_snake_case)]
pub struct Docked {  
  timestamp: String,
  event: String,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  StarSystem: String,
  SystemAddress: f64,
  MarketID: f64,
  StationFaction: StationFactionStruct,
  StationGovernment: String,
  StationGovernment_Localised: Option<String>,
  StationServices: Vec<String>,
  StationEconomy: Option<String>,
  StationEconomy_Localised: Option<String>,
  StationEconomies: Option<Vec<StationEconomiesStruct>>,
  DistFromStarLS: f64,
  LandingPads: Option<LandingPadsStruct>,
  Wanted: Option<bool>,
  ActiveFine: Option<bool>,
  StationAllegiance: Option<String>,
  CockpitBreach: Option<bool>,
  StationState: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Progress")]
#[allow(non_snake_case)]
pub struct Progress {  
  timestamp: String,
  event: String,
  Combat: f64,
  Trade: f64,
  Explore: f64,
  Soldier: Option<f64>,
  Exobiologist: Option<f64>,
  Empire: f64,
  Federation: f64,
  CQC: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockingRequested")]
#[allow(non_snake_case)]
pub struct DockingRequested {  
  timestamp: String,
  event: String,
  MarketID: f64,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
  LandingPads: Option<LandingPadsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ApproachSettlement")]
#[allow(non_snake_case)]
pub struct ApproachSettlement {  
  timestamp: String,
  event: String,
  Name: String,
  MarketID: Option<f64>,
  SystemAddress: f64,
  BodyID: f64,
  BodyName: String,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  Name_Localised: Option<String>,
  StationFaction: Option<StationFactionStruct>,
  StationGovernment: Option<String>,
  StationGovernment_Localised: Option<String>,
  StationAllegiance: Option<String>,
  StationServices: Option<Vec<String>>,
  StationEconomy: Option<String>,
  StationEconomy_Localised: Option<String>,
  StationEconomies: Option<Vec<StationEconomiesStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MaterialDiscovered")]
#[allow(non_snake_case)]
pub struct MaterialDiscovered {  
  timestamp: String,
  event: String,
  Category: String,
  Name: String,
  Name_Localised: Option<String>,
  DiscoveryNumber: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("FighterRebuilt")]
#[allow(non_snake_case)]
pub struct FighterRebuilt {  
  timestamp: String,
  event: String,
  Loadout: String,
  ID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockSRV")]
#[allow(non_snake_case)]
pub struct DockSRV {  
  timestamp: String,
  event: String,
  SRVType: Option<String>,
  SRVType_Localised: Option<String>,
  ID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewLaunchFighter")]
#[allow(non_snake_case)]
pub struct CrewLaunchFighter {  
  timestamp: String,
  event: String,
  Telepresence: bool,
  Crew: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ColonisationSystemClaim")]
#[allow(non_snake_case)]
pub struct ColonisationSystemClaim {  
  timestamp: String,
  event: String,
  StarSystem: String,
  SystemAddress: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplaySalary")]
#[allow(non_snake_case)]
pub struct PowerplaySalary {  
  timestamp: String,
  event: String,
  Power: String,
  Amount: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("FighterDestroyed")]
#[allow(non_snake_case)]
pub struct FighterDestroyed {  
  timestamp: String,
  event: String,
  ID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SAASignalsFound")]
#[allow(non_snake_case)]
pub struct SAASignalsFound {  
  timestamp: String,
  event: String,
  BodyName: String,
  SystemAddress: f64,
  BodyID: f64,
  Signals: Vec<SignalsStruct>,
  Genuses: Option<Vec<GenusesStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("BookDropship")]
#[allow(non_snake_case)]
pub struct BookDropship {  
  timestamp: String,
  event: String,
  Retreat: Option<bool>,
  Cost: f64,
  DestinationSystem: String,
  DestinationLocation: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("LaunchFighter")]
#[allow(non_snake_case)]
pub struct LaunchFighter {  
  timestamp: String,
  event: String,
  Loadout: String,
  ID: f64,
  PlayerControlled: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("BackpackChange")]
#[allow(non_snake_case)]
pub struct BackpackChange {  
  timestamp: String,
  event: String,
  Added: Option<Vec<ChangeEntryCommonStruct>>,
  Removed: Option<Vec<ChangeEntryCommonStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrimeVictim")]
#[allow(non_snake_case)]
pub struct CrimeVictim {  
  timestamp: String,
  event: String,
  Offender: String,
  Offender_Localised: Option<String>,
  CrimeType: String,
  Fine: Option<f64>,
  Bounty: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Location")]
#[allow(non_snake_case)]
pub struct Location {  
  timestamp: String,
  event: String,
  DistFromStarLS: Option<f64>,
  Docked: bool,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  Wanted: Option<bool>,
  StarSystem: String,
  SystemAddress: f64,
  StarPos: Vec<f64>,
  SystemAllegiance: String,
  SystemEconomy: String,
  SystemEconomy_Localised: Option<String>,
  SystemSecondEconomy: String,
  SystemSecondEconomy_Localised: Option<String>,
  SystemGovernment: String,
  SystemGovernment_Localised: Option<String>,
  SystemSecurity: String,
  SystemSecurity_Localised: Option<String>,
  Population: f64,
  Body: String,
  BodyID: f64,
  BodyType: String,
  Factions: Option<Vec<FactionsStruct>>,
  SystemFaction: Option<SystemFactionStruct>,
  Powers: Option<Vec<String>>,
  ControllingPower: Option<String>,
  PowerplayState: Option<String>,
  PowerplayStateControlProgress: Option<f64>,
  PowerplayStateReinforcement: Option<f64>,
  PowerplayStateUndermining: Option<f64>,
  PowerplayConflictProgress: Option<Vec<PowerplayConflictProgressStruct>>,
  Conflicts: Option<Vec<ConflictsStruct>>,
  ThargoidWar: Option<ThargoidWarStruct>,
  OnFoot: Option<bool>,
  StationName: Option<String>,
  StationName_Localised: Option<String>,
  StationType: Option<String>,
  MarketID: Option<f64>,
  StationFaction: Option<StationFactionStruct>,
  StationGovernment: Option<String>,
  StationGovernment_Localised: Option<String>,
  StationServices: Option<Vec<String>>,
  StationEconomy: Option<String>,
  StationEconomy_Localised: Option<String>,
  StationEconomies: Option<Vec<StationEconomiesStruct>>,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  InSRV: Option<bool>,
  StationAllegiance: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("UnderAttack")]
#[allow(non_snake_case)]
pub struct UnderAttack {  
  timestamp: String,
  event: String,
  Target: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("USSDrop")]
#[allow(non_snake_case)]
pub struct USSDrop {  
  timestamp: String,
  event: String,
  USSType: String,
  USSType_Localised: Option<String>,
  USSThreat: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("NavRoute")]
#[allow(non_snake_case)]
pub struct NavRoute {  
  timestamp: String,
  event: String,
  Route: Option<Vec<RouteStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MissionAccepted")]
#[allow(non_snake_case)]
pub struct MissionAccepted {  
  timestamp: String,
  event: String,
  Faction: String,
  Name: String,
  LocalisedName: String,
  Commodity: Option<String>,
  Commodity_Localised: Option<String>,
  Count: Option<f64>,
  Expiry: Option<String>,
  Wing: bool,
  Influence: String,
  Reputation: String,
  Reward: Option<f64>,
  MissionID: f64,
  TargetType: Option<String>,
  TargetType_Localised: Option<String>,
  TargetFaction: Option<String>,
  DestinationSystem: Option<String>,
  DestinationStation: Option<String>,
  NewDestinationSystem: Option<String>,
  NewDestinationStation: Option<String>,
  Target: Option<String>,
  Donation: Option<String>,
  Target_Localised: Option<String>,
  DestinationSettlement: Option<String>,
  KillCount: Option<f64>,
  PassengerCount: Option<f64>,
  PassengerVIPs: Option<bool>,
  PassengerWanted: Option<bool>,
  PassengerType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Rank")]
#[allow(non_snake_case)]
pub struct Rank {  
  timestamp: String,
  event: String,
  Combat: f64,
  Trade: f64,
  Explore: f64,
  Soldier: Option<f64>,
  Exobiologist: Option<f64>,
  Empire: f64,
  Federation: f64,
  CQC: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("AppliedToSquadron")]
#[allow(non_snake_case)]
pub struct AppliedToSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayCollect")]
#[allow(non_snake_case)]
pub struct PowerplayCollect {  
  timestamp: String,
  event: String,
  Power: String,
  Type: String,
  Type_Localised: Option<String>,
  Count: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("MultiSellExplorationData")]
#[allow(non_snake_case)]
pub struct MultiSellExplorationData {  
  timestamp: String,
  event: String,
  Discovered: Vec<DiscoveredStruct>,
  BaseValue: f64,
  Bonus: f64,
  TotalEarnings: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellOrganicData")]
#[allow(non_snake_case)]
pub struct SellOrganicData {  
  timestamp: String,
  event: String,
  MarketID: f64,
  BioData: Vec<BioDataStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ColonisationConstructionDepot")]
#[allow(non_snake_case)]
pub struct ColonisationConstructionDepot {  
  timestamp: String,
  event: String,
  MarketID: f64,
  ConstructionProgress: f64,
  ConstructionComplete: bool,
  ConstructionFailed: bool,
  ResourcesRequired: Vec<ResourcesRequiredStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleSellRemote")]
#[allow(non_snake_case)]
pub struct ModuleSellRemote {  
  timestamp: String,
  event: String,
  StorageSlot: f64,
  SellItem: String,
  SellItem_Localised: Option<String>,
  ServerId: f64,
  SellPrice: f64,
  Ship: String,
  ShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Repair")]
#[allow(non_snake_case)]
pub struct Repair {  
  timestamp: String,
  event: String,
  Cost: f64,
  Item: Option<String>,
  Items: Option<Vec<String>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FuelScoop")]
#[allow(non_snake_case)]
pub struct FuelScoop {  
  timestamp: String,
  event: String,
  Scooped: f64,
  Total: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("RepairDrone")]
#[allow(non_snake_case)]
pub struct RepairDrone {  
  timestamp: String,
  event: String,
  HullRepaired: Option<f64>,
  CockpitRepaired: Option<f64>,
  CorrosionRepaired: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Fileheader")]
#[allow(non_snake_case)]
pub struct Fileheader {  
  timestamp: String,
  event: String,
  part: f64,
  language: String,
  Odyssey: bool,
  gameversion: String,
  build: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CancelTaxi")]
#[allow(non_snake_case)]
pub struct CancelTaxi {  
  timestamp: String,
  event: String,
  Refund: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("NavBeaconScan")]
#[allow(non_snake_case)]
pub struct NavBeaconScan {  
  timestamp: String,
  event: String,
  SystemAddress: f64,
  NumBodies: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("SquadronDemotion")]
#[allow(non_snake_case)]
pub struct SquadronDemotion {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
  OldRank: f64,
  NewRank: f64,
  OldRankName: Option<String>,
  OldRankName_Localised: Option<String>,
  NewRankName: Option<String>,
  NewRankName_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleRetrieve")]
#[allow(non_snake_case)]
pub struct ModuleRetrieve {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Slot: String,
  RetrievedItem: String,
  RetrievedItem_Localised: Option<String>,
  Ship: String,
  ShipID: f64,
  Hot: bool,
  EngineerModifications: Option<String>,
  Level: Option<f64>,
  Quality: Option<f64>,
  SwapOutItem: Option<String>,
  SwapOutItem_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Interdiction")]
#[allow(non_snake_case)]
pub struct Interdiction {  
  timestamp: String,
  event: String,
  Success: bool,
  Submitted: Option<bool>,
  Interdicted: String,
  Interdicted_Localised: Option<String>,
  IsPlayer: bool,
  CombatRank: Option<f64>,
  Faction: Option<String>,
  Power: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipLocker")]
#[allow(non_snake_case)]
pub struct ShipLocker {  
  timestamp: String,
  event: String,
  Items: Option<Vec<ItemCommonStruct>>,
  Components: Option<Vec<ComponentCommonStruct>>,
  Consumables: Option<Vec<ConsumableCommonStruct>>,
  Data: Option<Vec<DataCommonStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("HeatWarning")]
#[allow(non_snake_case)]
pub struct HeatWarning {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierCrewServices")]
#[allow(non_snake_case)]
pub struct CarrierCrewServices {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CrewRole: String,
  CarrierType: Option<String>,
  Operation: String,
  CrewName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierShipPack")]
#[allow(non_snake_case)]
pub struct CarrierShipPack {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  Operation: String,
  PackTheme: String,
  PackTier: f64,
  Refund: Option<f64>,
  Cost: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Synthesis")]
#[allow(non_snake_case)]
pub struct Synthesis {  
  timestamp: String,
  event: String,
  Name: String,
  Materials: Vec<MaterialsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierFinance")]
#[allow(non_snake_case)]
pub struct CarrierFinance {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  CarrierBalance: f64,
  ReserveBalance: f64,
  AvailableBalance: f64,
  ReservePercent: f64,
  TaxRate_pioneersupplies: Option<f64>,
  TaxRate_shipyard: Option<f64>,
  TaxRate_rearm: Option<f64>,
  TaxRate_outfitting: Option<f64>,
  TaxRate_refuel: Option<f64>,
  TaxRate_repair: Option<f64>,
  TaxRate: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ProspectedAsteroid")]
#[allow(non_snake_case)]
pub struct ProspectedAsteroid {  
  timestamp: String,
  event: String,
  Materials: Vec<MaterialsStruct>,
  Content: String,
  Content_Localised: Option<String>,
  Remaining: f64,
  MotherlodeMaterial: Option<String>,
  MotherlodeMaterial_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellShipOnRebuy")]
#[allow(non_snake_case)]
pub struct SellShipOnRebuy {  
  timestamp: String,
  event: String,
  ShipType: String,
  System: String,
  SellShipId: f64,
  ShipPrice: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellDrones")]
#[allow(non_snake_case)]
pub struct SellDrones {  
  timestamp: String,
  event: String,
  Type: String,
  Count: f64,
  SellPrice: f64,
  TotalSale: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("WingAdd")]
#[allow(non_snake_case)]
pub struct WingAdd {  
  timestamp: String,
  event: String,
  Name: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierDepositFuel")]
#[allow(non_snake_case)]
pub struct CarrierDepositFuel {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  Amount: f64,
  Total: f64,
  CarrierType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Interdicted")]
#[allow(non_snake_case)]
pub struct Interdicted {  
  timestamp: String,
  event: String,
  Submitted: bool,
  Interdictor: Option<String>,
  IsPlayer: bool,
  IsThargoid: Option<bool>,
  CombatRank: Option<f64>,
  Faction: Option<String>,
  Power: Option<String>,
  Interdictor_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SupercruiseExit")]
#[allow(non_snake_case)]
pub struct SupercruiseExit {  
  timestamp: String,
  event: String,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  StarSystem: String,
  SystemAddress: f64,
  Body: String,
  BodyID: f64,
  BodyType: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellWeapon")]
#[allow(non_snake_case)]
pub struct SellWeapon {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Class: f64,
  WeaponMods: Vec<String>,
  Price: f64,
  SuitModuleID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuyTradeData")]
#[allow(non_snake_case)]
pub struct BuyTradeData {  
  timestamp: String,
  event: String,
  System: String,
  Cost: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("DeliverPowerMicroResources")]
#[allow(non_snake_case)]
pub struct DeliverPowerMicroResources {  
  timestamp: String,
  event: String,
  TotalCount: f64,
  MicroResources: Vec<MicroResourcesStruct>,
  MarketID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("StoredModules")]
#[allow(non_snake_case)]
pub struct StoredModules {  
  timestamp: String,
  event: String,
  MarketID: f64,
  StationName: String,
  StarSystem: String,
  Items: Vec<ItemsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SRVDestroyed")]
#[allow(non_snake_case)]
pub struct SRVDestroyed {  
  timestamp: String,
  event: String,
  ID: f64,
  SRVType: Option<String>,
  SRVType_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FSSBodySignals")]
#[allow(non_snake_case)]
pub struct FSSBodySignals {  
  timestamp: String,
  event: String,
  BodyName: String,
  BodyID: f64,
  SystemAddress: f64,
  Signals: Vec<SignalsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MissionRedirected")]
#[allow(non_snake_case)]
pub struct MissionRedirected {  
  timestamp: String,
  event: String,
  MissionID: f64,
  Name: String,
  LocalisedName: Option<String>,
  LocalisedName_Localised: Option<String>,
  NewDestinationStation: String,
  NewDestinationSystem: String,
  OldDestinationStation: String,
  OldDestinationSystem: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("QuitACrew")]
#[allow(non_snake_case)]
pub struct QuitACrew {  
  timestamp: String,
  event: String,
  Captain: String,
  Telepresence: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardNew")]
#[allow(non_snake_case)]
pub struct ShipyardNew {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  NewShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardTransfer")]
#[allow(non_snake_case)]
pub struct ShipyardTransfer {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  ShipID: f64,
  System: String,
  ShipMarketID: f64,
  Distance: f64,
  TransferPrice: f64,
  TransferTime: f64,
  MarketID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipLockerMaterials")]
#[allow(non_snake_case)]
pub struct ShipLockerMaterials {  
  timestamp: String,
  event: String,
  Items: Vec<ItemsStruct>,
  Components: Vec<ComponentsStruct>,
  Consumables: Vec<ConsumablesStruct>,
  Data: Vec<DataStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("NpcCrewRank")]
#[allow(non_snake_case)]
pub struct NpcCrewRank {  
  timestamp: String,
  event: String,
  NpcCrewName: String,
  NpcCrewId: f64,
  RankCombat: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleBuyAndStore")]
#[allow(non_snake_case)]
pub struct ModuleBuyAndStore {  
  timestamp: String,
  event: String,
  BuyItem: String,
  BuyItem_Localised: Option<String>,
  MarketID: f64,
  BuyPrice: f64,
  Ship: String,
  ShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CancelledSquadronApplication")]
#[allow(non_snake_case)]
pub struct CancelledSquadronApplication {  
  timestamp: String,
  event: String,
  SquadronID: f64,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Died")]
#[allow(non_snake_case)]
pub struct Died {  
  timestamp: String,
  event: String,
  KillerName: Option<String>,
  KillerShip: Option<String>,
  KillerRank: Option<String>,
  KillerName_Localised: Option<String>,
  Killers: Option<Vec<KillersStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuyWeapon")]
#[allow(non_snake_case)]
pub struct BuyWeapon {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Class: f64,
  Price: f64,
  SuitModuleID: f64,
  WeaponMods: Vec<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewMemberRoleChange")]
#[allow(non_snake_case)]
pub struct CrewMemberRoleChange {  
  timestamp: String,
  event: String,
  Telepresence: Option<bool>,
  Crew: String,
  Role: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayJoin")]
#[allow(non_snake_case)]
pub struct PowerplayJoin {  
  timestamp: String,
  event: String,
  Power: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleInfo")]
#[allow(non_snake_case)]
pub struct ModuleInfo {  
  timestamp: String,
  event: String,
  Modules: Option<Vec<ModulesStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewHire")]
#[allow(non_snake_case)]
pub struct CrewHire {  
  timestamp: String,
  event: String,
  Name: String,
  CrewID: f64,
  Faction: String,
  Cost: f64,
  CombatRank: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuyMicroResources")]
#[allow(non_snake_case)]
pub struct BuyMicroResources {  
  timestamp: String,
  event: String,
  Name: Option<String>,
  Name_Localised: Option<String>,
  Category: Option<String>,
  Count: Option<f64>,
  Price: f64,
  MarketID: f64,
  TotalCount: Option<f64>,
  MicroResources: Option<Vec<MicroResourcesStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardSell")]
#[allow(non_snake_case)]
pub struct ShipyardSell {  
  timestamp: String,
  event: String,
  ShipType: String,
  SellShipID: f64,
  ShipPrice: f64,
  MarketID: f64,
  ShipType_Localised: Option<String>,
  System: Option<String>,
  ShipMarketID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FSSDiscoveryScan")]
#[allow(non_snake_case)]
pub struct FSSDiscoveryScan {  
  timestamp: String,
  event: String,
  Progress: f64,
  BodyCount: f64,
  NonBodyCount: f64,
  SystemName: String,
  SystemAddress: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Disembark")]
#[allow(non_snake_case)]
pub struct Disembark {  
  timestamp: String,
  event: String,
  SRV: bool,
  Taxi: bool,
  Multicrew: bool,
  ID: Option<f64>,
  StarSystem: String,
  SystemAddress: f64,
  Body: String,
  BodyID: f64,
  OnStation: bool,
  OnPlanet: bool,
  StationName: Option<String>,
  StationType: Option<String>,
  MarketID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SupercruiseDestinationDrop")]
#[allow(non_snake_case)]
pub struct SupercruiseDestinationDrop {  
  timestamp: String,
  event: String,
  Type: String,
  Type_Localised: Option<String>,
  MarketID: Option<f64>,
  Threat: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleSwap")]
#[allow(non_snake_case)]
pub struct ModuleSwap {  
  timestamp: String,
  event: String,
  MarketID: f64,
  FromSlot: String,
  ToSlot: String,
  FromItem: String,
  FromItem_Localised: Option<String>,
  ToItem: String,
  ToItem_Localised: Option<String>,
  Ship: String,
  ShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Promotion")]
#[allow(non_snake_case)]
pub struct Promotion {  
  timestamp: String,
  event: String,
  Explore: Option<f64>,
  Combat: Option<f64>,
  Soldier: Option<f64>,
  Federation: Option<f64>,
  Exobiologist: Option<f64>,
  Empire: Option<f64>,
  Trade: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuyAmmo")]
#[allow(non_snake_case)]
pub struct BuyAmmo {  
  timestamp: String,
  event: String,
  Cost: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Powerplay")]
#[allow(non_snake_case)]
pub struct Powerplay {  
  timestamp: String,
  event: String,
  Power: String,
  Rank: f64,
  Merits: f64,
  Votes: Option<f64>,
  TimePledged: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Shipyard")]
#[allow(non_snake_case)]
pub struct Shipyard {  
  timestamp: String,
  event: String,
  MarketID: f64,
  StationName: String,
  StarSystem: String,
  Horizons: Option<bool>,
  AllowCobraMkIV: Option<bool>,
  PriceList: Option<Vec<PriceListStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SquadronApplicationApproved")]
#[allow(non_snake_case)]
pub struct SquadronApplicationApproved {  
  timestamp: String,
  event: String,
  SquadronID: f64,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayLeave")]
#[allow(non_snake_case)]
pub struct PowerplayLeave {  
  timestamp: String,
  event: String,
  Power: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Embark")]
#[allow(non_snake_case)]
pub struct Embark {  
  timestamp: String,
  event: String,
  SRV: bool,
  Taxi: bool,
  Multicrew: bool,
  ID: Option<f64>,
  StarSystem: String,
  SystemAddress: f64,
  Body: String,
  BodyID: f64,
  OnStation: bool,
  OnPlanet: bool,
  StationName: Option<String>,
  StationType: Option<String>,
  MarketID: Option<f64>,
  Crew: Option<Vec<CrewStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipRedeemed")]
#[allow(non_snake_case)]
pub struct ShipRedeemed {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  NewShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CodexEntry")]
#[allow(non_snake_case)]
pub struct CodexEntry {  
  timestamp: String,
  event: String,
  EntryID: f64,
  Name: String,
  Name_Localised: Option<String>,
  SubCategory: String,
  SubCategory_Localised: Option<String>,
  Category: String,
  Category_Localised: Option<String>,
  Region: String,
  Region_Localised: Option<String>,
  System: String,
  SystemAddress: f64,
  BodyID: Option<f64>,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  VoucherAmount: Option<f64>,
  NearestDestination: Option<String>,
  NearestDestination_Localised: Option<String>,
  IsNewEntry: Option<bool>,
  NewTraitsDiscovered: Option<bool>,
  Traits: Option<Vec<String>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockFighter")]
#[allow(non_snake_case)]
pub struct DockFighter {  
  timestamp: String,
  event: String,
  ID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("RedeemVoucher")]
#[allow(non_snake_case)]
pub struct RedeemVoucher {  
  timestamp: String,
  event: String,
  Type: String,
  Faction: Option<String>,
  Amount: f64,
  Factions: Option<Vec<FactionsStruct>>,
  BrokerPercentage: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ScanBaryCentre")]
#[allow(non_snake_case)]
pub struct ScanBaryCentre {  
  timestamp: String,
  event: String,
  StarSystem: String,
  SystemAddress: f64,
  BodyID: f64,
  SemiMajorAxis: f64,
  Eccentricity: f64,
  OrbitalInclination: f64,
  Periapsis: f64,
  OrbitalPeriod: f64,
  AscendingNode: f64,
  MeanAnomaly: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierCancelDecommission")]
#[allow(non_snake_case)]
pub struct CarrierCancelDecommission {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("TransferMicroResources")]
#[allow(non_snake_case)]
pub struct TransferMicroResources {  
  timestamp: String,
  event: String,
  Transfers: Vec<TransfersStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleBuy")]
#[allow(non_snake_case)]
pub struct ModuleBuy {  
  timestamp: String,
  event: String,
  Slot: String,
  BuyItem: String,
  BuyItem_Localised: Option<String>,
  MarketID: f64,
  BuyPrice: f64,
  Ship: String,
  ShipID: f64,
  StoredItem: Option<String>,
  StoredItem_Localised: Option<String>,
  SellItem: Option<String>,
  SellItem_Localised: Option<String>,
  SellPrice: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("LoadoutRemoveModule")]
#[allow(non_snake_case)]
pub struct LoadoutRemoveModule {  
  timestamp: String,
  event: String,
  LoadoutName: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  LoadoutID: f64,
  SlotName: String,
  ModuleName: String,
  ModuleName_Localised: Option<String>,
  Class: f64,
  SuitModuleID: f64,
  WeaponMods: Vec<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DatalinkScan")]
#[allow(non_snake_case)]
pub struct DatalinkScan {  
  timestamp: String,
  event: String,
  Message: String,
  Message_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MassModuleStore")]
#[allow(non_snake_case)]
pub struct MassModuleStore {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Ship: String,
  ShipID: f64,
  Items: Vec<ItemsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Reputation")]
#[allow(non_snake_case)]
pub struct Reputation {  
  timestamp: String,
  event: String,
  Empire: Option<f64>,
  Federation: Option<f64>,
  Alliance: Option<f64>,
  Independent: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewMemberJoins")]
#[allow(non_snake_case)]
pub struct CrewMemberJoins {  
  timestamp: String,
  event: String,
  Telepresence: Option<bool>,
  Crew: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("MarketBuy")]
#[allow(non_snake_case)]
pub struct MarketBuy {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Type: String,
  Count: f64,
  BuyPrice: f64,
  TotalCost: f64,
  Type_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SAAScanComplete")]
#[allow(non_snake_case)]
pub struct SAAScanComplete {  
  timestamp: String,
  event: String,
  BodyName: String,
  SystemAddress: f64,
  BodyID: f64,
  ProbesUsed: f64,
  EfficiencyTarget: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Scanned")]
#[allow(non_snake_case)]
pub struct Scanned {  
  timestamp: String,
  event: String,
  ScanType: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Backpack")]
#[allow(non_snake_case)]
pub struct Backpack {  
  timestamp: String,
  event: String,
  Items: Option<Vec<ItemCommonStruct>>,
  Components: Option<Vec<ComponentCommonStruct>>,
  Consumables: Option<Vec<ConsumableCommonStruct>>,
  Data: Option<Vec<DataCommonStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("HoloscreenHacked")]
#[allow(non_snake_case)]
pub struct HoloscreenHacked {  
  timestamp: String,
  event: String,
  PowerBefore: String,
  PowerAfter: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ScanOrganic")]
#[allow(non_snake_case)]
pub struct ScanOrganic {  
  timestamp: String,
  event: String,
  ScanType: String,
  Genus: String,
  Genus_Localised: Option<String>,
  Species: String,
  Species_Localised: Option<String>,
  Variant: Option<String>,
  Variant_Localised: Option<String>,
  WasLogged: Option<bool>,
  SystemAddress: f64,
  Body: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Bounty")]
#[allow(non_snake_case)]
pub struct Bounty {  
  timestamp: String,
  event: String,
  Rewards: Option<Vec<RewardsStruct>>,
  PilotName: Option<String>,
  PilotName_Localised: Option<String>,
  Target: String,
  Target_Localised: Option<String>,
  TotalReward: Option<f64>,
  VictimFaction: String,
  VictimFaction_Localised: Option<String>,
  SharedWithOthers: Option<f64>,
  Reward: Option<f64>,
  Faction: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockingTimeout")]
#[allow(non_snake_case)]
pub struct DockingTimeout {  
  timestamp: String,
  event: String,
  MarketID: Option<f64>,
  StationName: Option<String>,
  StationName_Localised: Option<String>,
  StationType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("JetConeDamage")]
#[allow(non_snake_case)]
pub struct JetConeDamage {  
  timestamp: String,
  event: String,
  Module: String,
  Module_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SelfDestruct")]
#[allow(non_snake_case)]
pub struct SelfDestruct {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CollectCargo")]
#[allow(non_snake_case)]
pub struct CollectCargo {  
  timestamp: String,
  event: String,
  Type: String,
  Type_Localised: Option<String>,
  Stolen: bool,
  MissionID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SquadronStartup")]
#[allow(non_snake_case)]
pub struct SquadronStartup {  
  timestamp: String,
  event: String,
  SquadronName: String,
  CurrentRank: f64,
  CurrentRankName: Option<String>,
  CurrentRankName_Localised: Option<String>,
  SquadronID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("EscapeInterdiction")]
#[allow(non_snake_case)]
pub struct EscapeInterdiction {  
  timestamp: String,
  event: String,
  Interdictor: String,
  Interdictor_Localised: Option<String>,
  IsPlayer: bool,
  IsThargoid: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SquadronPromotion")]
#[allow(non_snake_case)]
pub struct SquadronPromotion {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
  OldRank: f64,
  NewRank: f64,
  OldRankName: Option<String>,
  OldRankName_Localised: Option<String>,
  NewRankName: Option<String>,
  NewRankName_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("VehicleSwitch")]
#[allow(non_snake_case)]
pub struct VehicleSwitch {  
  timestamp: String,
  event: String,
  To: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("FactionKillBond")]
#[allow(non_snake_case)]
pub struct FactionKillBond {  
  timestamp: String,
  event: String,
  Reward: f64,
  AwardingFaction: String,
  AwardingFaction_Localised: Option<String>,
  VictimFaction: String,
  VictimFaction_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardBankDeposit")]
#[allow(non_snake_case)]
pub struct ShipyardBankDeposit {  
  timestamp: String,
  event: String,
  MarketID: f64,
  ShipType: String,
  ShipType_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("RebootRepair")]
#[allow(non_snake_case)]
pub struct RebootRepair {  
  timestamp: String,
  event: String,
  Modules: Vec<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Outfitting")]
#[allow(non_snake_case)]
pub struct Outfitting {  
  timestamp: String,
  event: String,
  MarketID: f64,
  StationName: String,
  StarSystem: String,
  Horizons: Option<bool>,
  Items: Option<Vec<ItemsStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("RefuelPartial")]
#[allow(non_snake_case)]
pub struct RefuelPartial {  
  timestamp: String,
  event: String,
  Cost: f64,
  Amount: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierLocation")]
#[allow(non_snake_case)]
pub struct CarrierLocation {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  StarSystem: String,
  SystemAddress: f64,
  BodyID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("AsteroidCracked")]
#[allow(non_snake_case)]
pub struct AsteroidCracked {  
  timestamp: String,
  event: String,
  Body: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CreateSuitLoadout")]
#[allow(non_snake_case)]
pub struct CreateSuitLoadout {  
  timestamp: String,
  event: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  SuitMods: Vec<String>,
  LoadoutID: f64,
  LoadoutName: String,
  Modules: Vec<ModulesStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuyDrones")]
#[allow(non_snake_case)]
pub struct BuyDrones {  
  timestamp: String,
  event: String,
  Type: String,
  Count: f64,
  BuyPrice: f64,
  TotalCost: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleStore")]
#[allow(non_snake_case)]
pub struct ModuleStore {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Slot: String,
  StoredItem: String,
  ReplacementItem: Option<String>,
  StoredItem_Localised: Option<String>,
  Ship: String,
  ShipID: f64,
  Hot: Option<bool>,
  EngineerModifications: Option<String>,
  Level: Option<f64>,
  Quality: Option<f64>,
  Cost: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockingGranted")]
#[allow(non_snake_case)]
pub struct DockingGranted {  
  timestamp: String,
  event: String,
  LandingPad: f64,
  MarketID: f64,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("SuitLoadout")]
#[allow(non_snake_case)]
pub struct SuitLoadout {  
  timestamp: String,
  event: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  SuitMods: Vec<String>,
  LoadoutID: f64,
  LoadoutName: String,
  Modules: Vec<ModulesStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Friends")]
#[allow(non_snake_case)]
pub struct Friends {  
  timestamp: String,
  event: String,
  Status: String,
  Name: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("FSDJump")]
#[allow(non_snake_case)]
pub struct FSDJump {  
  timestamp: String,
  event: String,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  Wanted: Option<bool>,
  StarSystem: String,
  SystemAddress: f64,
  StarPos: Vec<f64>,
  SystemAllegiance: String,
  SystemEconomy: String,
  SystemEconomy_Localised: Option<String>,
  SystemSecondEconomy: String,
  SystemSecondEconomy_Localised: Option<String>,
  SystemGovernment: String,
  SystemGovernment_Localised: Option<String>,
  SystemSecurity: String,
  SystemSecurity_Localised: Option<String>,
  Population: f64,
  Body: String,
  BodyID: f64,
  BodyType: String,
  JumpDist: f64,
  FuelUsed: f64,
  FuelLevel: f64,
  Factions: Option<Vec<FactionsStruct>>,
  SystemFaction: Option<SystemFactionStruct>,
  Powers: Option<Vec<String>>,
  ControllingPower: Option<String>,
  PowerplayState: Option<String>,
  PowerplayStateControlProgress: Option<f64>,
  PowerplayStateReinforcement: Option<f64>,
  PowerplayStateUndermining: Option<f64>,
  PowerplayConflictProgress: Option<Vec<PowerplayConflictProgressStruct>>,
  Conflicts: Option<Vec<ConflictsStruct>>,
  ThargoidWar: Option<ThargoidWarStruct>,
  BoostUsed: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MissionCompleted")]
#[allow(non_snake_case)]
pub struct MissionCompleted {  
  timestamp: String,
  event: String,
  Faction: String,
  Name: String,
  LocalisedName: Option<String>,
  MissionID: f64,
  Commodity: Option<String>,
  Commodity_Localised: Option<String>,
  Count: Option<f64>,
  Reward: Option<f64>,
  PermitsAwarded: Option<Vec<String>>,
  CommodityReward: Option<Vec<CommodityRewardStruct>>,
  MaterialsReward: Option<Vec<MaterialsRewardStruct>>,
  FactionEffects: Option<Vec<FactionEffectsStruct>>,
  Donation: Option<String>,
  Donated: Option<f64>,
  TargetFaction: Option<String>,
  DestinationSystem: Option<String>,
  DestinationStation: Option<String>,
  Target: Option<String>,
  Target_Localised: Option<String>,
  DestinationSettlement: Option<String>,
  TargetType: Option<String>,
  TargetType_Localised: Option<String>,
  KillCount: Option<f64>,
  NewDestinationSystem: Option<String>,
  NewDestinationStation: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CommunityGoal")]
#[allow(non_snake_case)]
pub struct CommunityGoal {  
  timestamp: String,
  event: String,
  CurrentGoals: Vec<CurrentGoalsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Cargo")]
#[allow(non_snake_case)]
pub struct Cargo {  
  timestamp: String,
  event: String,
  Vessel: String,
  Count: f64,
  Inventory: Option<Vec<InventoryStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("JoinACrew")]
#[allow(non_snake_case)]
pub struct JoinACrew {  
  timestamp: String,
  event: String,
  Captain: String,
  Telepresence: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("EjectCargo")]
#[allow(non_snake_case)]
pub struct EjectCargo {  
  timestamp: String,
  event: String,
  Type: String,
  Type_Localised: Option<String>,
  Count: f64,
  Abandoned: bool,
  MissionID: Option<f64>,
  PowerplayOrigin: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewFire")]
#[allow(non_snake_case)]
pub struct CrewFire {  
  timestamp: String,
  event: String,
  Name: String,
  CrewID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("StartJump")]
#[allow(non_snake_case)]
pub struct StartJump {  
  timestamp: String,
  event: String,
  Taxi: Option<bool>,
  JumpType: String,
  StarSystem: Option<String>,
  SystemAddress: Option<f64>,
  StarClass: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CargoDepot")]
#[allow(non_snake_case)]
pub struct CargoDepot {  
  timestamp: String,
  event: String,
  MissionID: f64,
  UpdateType: String,
  CargoType: Option<String>,
  Count: Option<f64>,
  StartMarketID: f64,
  EndMarketID: f64,
  ItemsCollected: f64,
  ItemsDelivered: f64,
  TotalItemsToDeliver: f64,
  Progress: f64,
  CargoType_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayRank")]
#[allow(non_snake_case)]
pub struct PowerplayRank {  
  timestamp: String,
  event: String,
  Power: String,
  Rank: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("MarketSell")]
#[allow(non_snake_case)]
pub struct MarketSell {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Type: String,
  Count: f64,
  SellPrice: f64,
  TotalSale: f64,
  AvgPricePaid: f64,
  Type_Localised: Option<String>,
  StolenGoods: Option<bool>,
  IllegalGoods: Option<bool>,
  BlackMarket: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Materials")]
#[allow(non_snake_case)]
pub struct Materials {  
  timestamp: String,
  event: String,
  Raw: Vec<RawStruct>,
  Manufactured: Vec<ManufacturedStruct>,
  Encoded: Vec<EncodedStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SquadronApplicationRejected")]
#[allow(non_snake_case)]
pub struct SquadronApplicationRejected {  
  timestamp: String,
  event: String,
  SquadronID: f64,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierStats")]
#[allow(non_snake_case)]
pub struct CarrierStats {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  Callsign: String,
  CarrierType: Option<String>,
  Name: String,
  DockingAccess: String,
  AllowNotorious: bool,
  FuelLevel: f64,
  JumpRangeCurr: f64,
  JumpRangeMax: f64,
  PendingDecommission: bool,
  SpaceUsage: SpaceUsageStruct,
  Finance: FinanceStruct,
  Crew: Vec<CrewStruct>,
  ShipPacks: Vec<ShipPacksStruct>,
  ModulePacks: Vec<ModulePacksStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MissionAbandoned")]
#[allow(non_snake_case)]
pub struct MissionAbandoned {  
  timestamp: String,
  event: String,
  Name: String,
  LocalisedName: Option<String>,
  MissionID: f64,
  Fine: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("UpgradeSuit")]
#[allow(non_snake_case)]
pub struct UpgradeSuit {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  SuitID: f64,
  Class: f64,
  Cost: f64,
  Resources: Option<Vec<ResourcesStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("LeaveBody")]
#[allow(non_snake_case)]
pub struct LeaveBody {  
  timestamp: String,
  event: String,
  StarSystem: String,
  SystemAddress: f64,
  Body: String,
  BodyID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("MaterialTrade")]
#[allow(non_snake_case)]
pub struct MaterialTrade {  
  timestamp: String,
  event: String,
  MarketID: f64,
  TraderType: String,
  Paid: PaidStruct,
  Received: ReceivedStruct,
}
#[derive(Clone, Debug, Event)]
#[event_name("JetConeBoost")]
#[allow(non_snake_case)]
pub struct JetConeBoost {  
  timestamp: String,
  event: String,
  BoostValue: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("BookTaxi")]
#[allow(non_snake_case)]
pub struct BookTaxi {  
  timestamp: String,
  event: String,
  Cost: f64,
  DestinationSystem: String,
  DestinationLocation: String,
  Retreat: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MiningRefined")]
#[allow(non_snake_case)]
pub struct MiningRefined {  
  timestamp: String,
  event: String,
  Type: String,
  Type_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Scan")]
#[allow(non_snake_case)]
pub struct Scan {  
  timestamp: String,
  event: String,
  ScanType: String,
  BodyName: String,
  BodyID: f64,
  Parents: Option<Vec<ParentsStruct>>,
  StarSystem: String,
  SystemAddress: f64,
  DistanceFromArrivalLS: f64,
  TidalLock: Option<bool>,
  TerraformState: Option<String>,
  PlanetClass: Option<String>,
  Atmosphere: Option<String>,
  AtmosphereType: Option<String>,
  AtmosphereComposition: Option<Vec<AtmosphereCompositionStruct>>,
  Volcanism: Option<String>,
  MassEM: Option<f64>,
  Radius: Option<f64>,
  SurfaceGravity: Option<f64>,
  SurfaceTemperature: Option<f64>,
  SurfacePressure: Option<f64>,
  Landable: Option<bool>,
  Composition: Option<CompositionStruct>,
  SemiMajorAxis: Option<f64>,
  Eccentricity: Option<f64>,
  OrbitalInclination: Option<f64>,
  Periapsis: Option<f64>,
  OrbitalPeriod: Option<f64>,
  AscendingNode: Option<f64>,
  MeanAnomaly: Option<f64>,
  RotationPeriod: Option<f64>,
  AxialTilt: Option<f64>,
  WasDiscovered: bool,
  WasMapped: bool,
  WasFootfalled: Option<bool>,
  StarType: Option<String>,
  Subclass: Option<f64>,
  StellarMass: Option<f64>,
  AbsoluteMagnitude: Option<f64>,
  Age_MY: Option<f64>,
  Luminosity: Option<String>,
  Rings: Option<Vec<RingsStruct>>,
  Materials: Option<Vec<MaterialsStruct>>,
  ReserveLevel: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FCMaterials")]
#[allow(non_snake_case)]
pub struct FCMaterials {  
  timestamp: String,
  event: String,
  MarketID: f64,
  CarrierName: String,
  CarrierID: String,
  Items: Option<Vec<ItemsStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SystemsShutdown")]
#[allow(non_snake_case)]
pub struct SystemsShutdown {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("DropItems")]
#[allow(non_snake_case)]
pub struct DropItems {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Type: String,
  OwnerID: f64,
  Count: f64,
  MissionID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("LaunchSRV")]
#[allow(non_snake_case)]
pub struct LaunchSRV {  
  timestamp: String,
  event: String,
  SRVType: Option<String>,
  SRVType_Localised: Option<String>,
  Loadout: String,
  ID: f64,
  PlayerControlled: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("EngineerContribution")]
#[allow(non_snake_case)]
pub struct EngineerContribution {  
  timestamp: String,
  event: String,
  Engineer: String,
  EngineerID: f64,
  Type: String,
  Commodity: Option<String>,
  Commodity_Localised: Option<String>,
  Quantity: f64,
  TotalQuantity: f64,
  Material: Option<String>,
  Material_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Music")]
#[allow(non_snake_case)]
pub struct Music {  
  timestamp: String,
  event: String,
  MusicTrack: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellMicroResources")]
#[allow(non_snake_case)]
pub struct SellMicroResources {  
  timestamp: String,
  event: String,
  TotalCount: f64,
  MicroResources: Vec<MicroResourcesStruct>,
  Price: f64,
  MarketID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("DisbandedSquadron")]
#[allow(non_snake_case)]
pub struct DisbandedSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("RequestPowerMicroResources")]
#[allow(non_snake_case)]
pub struct RequestPowerMicroResources {  
  timestamp: String,
  event: String,
  TotalCount: f64,
  MicroResources: Vec<MicroResourcesStruct>,
  MarketID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Missions")]
#[allow(non_snake_case)]
pub struct Missions {  
  timestamp: String,
  event: String,
  Active: Vec<ActiveStruct>,
  Failed: Vec<FailedStruct>,
  Complete: Vec<CompleteStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ReservoirReplenished")]
#[allow(non_snake_case)]
pub struct ReservoirReplenished {  
  timestamp: String,
  event: String,
  FuelMain: f64,
  FuelReservoir: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("DiscoveryScan")]
#[allow(non_snake_case)]
pub struct DiscoveryScan {  
  timestamp: String,
  event: String,
  SystemAddress: f64,
  Bodies: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("UpgradeWeapon")]
#[allow(non_snake_case)]
pub struct UpgradeWeapon {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Class: f64,
  SuitModuleID: f64,
  Cost: f64,
  Resources: Option<Vec<ResourcesStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Touchdown")]
#[allow(non_snake_case)]
pub struct Touchdown {  
  timestamp: String,
  event: String,
  PlayerControlled: bool,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  StarSystem: Option<String>,
  SystemAddress: Option<f64>,
  Body: Option<String>,
  BodyID: Option<f64>,
  OnStation: Option<bool>,
  OnPlanet: Option<bool>,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  NearestDestination: Option<String>,
  NearestDestination_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CockpitBreached")]
#[allow(non_snake_case)]
pub struct CockpitBreached {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("DeleteSuitLoadout")]
#[allow(non_snake_case)]
pub struct DeleteSuitLoadout {  
  timestamp: String,
  event: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  LoadoutID: f64,
  LoadoutName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Resurrect")]
#[allow(non_snake_case)]
pub struct Resurrect {  
  timestamp: String,
  event: String,
  Option: String,
  Cost: f64,
  Bankrupt: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierJumpRequest")]
#[allow(non_snake_case)]
pub struct CarrierJumpRequest {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  SystemName: String,
  Body: Option<String>,
  SystemAddress: f64,
  BodyID: f64,
  DepartureTime: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Status")]
#[allow(non_snake_case)]
pub struct Status {  
  timestamp: String,
  event: String,
  Flags: f64,
  Pips: Option<Vec<f64>>,
  FireGroup: Option<f64>,
  Fuel: Option<FuelStruct>,
  GuiFocus: Option<f64>,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  Heading: Option<f64>,
  Altitude: Option<f64>,
  Flags2: Option<f64>,
  Cargo: Option<f64>,
  LegalState: Option<String>,
  Balance: Option<f64>,
  Oxygen: Option<f64>,
  Health: Option<f64>,
  Temperature: Option<f64>,
  SelectedWeapon: Option<String>,
  BodyName: Option<String>,
  Destination: Option<DestinationStruct>,
  PlanetRadius: Option<f64>,
  SelectedWeapon_Localised: Option<String>,
  Gravity: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ScientificResearch")]
#[allow(non_snake_case)]
pub struct ScientificResearch {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Category: String,
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("FSDTarget")]
#[allow(non_snake_case)]
pub struct FSDTarget {  
  timestamp: String,
  event: String,
  Name: String,
  SystemAddress: f64,
  StarClass: String,
  RemainingJumpsInRoute: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipTargeted")]
#[allow(non_snake_case)]
pub struct ShipTargeted {  
  timestamp: String,
  event: String,
  TargetLocked: bool,
  Ship: Option<String>,
  ScanStage: Option<f64>,
  PilotName: Option<String>,
  PilotName_Localised: Option<String>,
  PilotRank: Option<String>,
  ShieldHealth: Option<f64>,
  HullHealth: Option<f64>,
  Faction: Option<String>,
  LegalStatus: Option<String>,
  Ship_Localised: Option<String>,
  SquadronID: Option<String>,
  Power: Option<String>,
  Bounty: Option<f64>,
  Subsystem: Option<String>,
  Subsystem_Localised: Option<String>,
  SubsystemHealth: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardBuy")]
#[allow(non_snake_case)]
pub struct ShipyardBuy {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  ShipPrice: f64,
  StoreOldShip: Option<String>,
  StoreShipID: Option<f64>,
  MarketID: f64,
  SellOldShip: Option<String>,
  SellShipID: Option<f64>,
  SellPrice: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("NavRouteClear")]
#[allow(non_snake_case)]
pub struct NavRouteClear {  
  timestamp: String,
  event: String,
  Route: Option<Vec<RouteStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CapShipBond")]
#[allow(non_snake_case)]
pub struct CapShipBond {  
  timestamp: String,
  event: String,
  Reward: f64,
  AwardingFaction: String,
  VictimFaction: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("SetUserShipName")]
#[allow(non_snake_case)]
pub struct SetUserShipName {  
  timestamp: String,
  event: String,
  Ship: String,
  ShipID: f64,
  UserShipName: String,
  UserShipId: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardRedeem")]
#[allow(non_snake_case)]
pub struct ShipyardRedeem {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  BundleID: Option<f64>,
  MarketID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Passengers")]
#[allow(non_snake_case)]
pub struct Passengers {  
  timestamp: String,
  event: String,
  Manifest: Vec<ManifestStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FSSSignalDiscovered")]
#[allow(non_snake_case)]
pub struct FSSSignalDiscovered {  
  timestamp: String,
  event: String,
  SystemAddress: f64,
  SignalName: String,
  SignalType: Option<String>,
  SignalName_Localised: Option<String>,
  IsStation: Option<bool>,
  USSType: Option<String>,
  USSType_Localised: Option<String>,
  SpawningState: Option<String>,
  SpawningState_Localised: Option<String>,
  SpawningFaction: Option<String>,
  SpawningFaction_Localised: Option<String>,
  SpawningPower: Option<String>,
  OpposingPower: Option<String>,
  ThreatLevel: Option<f64>,
  TimeRemaining: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ChangeCrewRole")]
#[allow(non_snake_case)]
pub struct ChangeCrewRole {  
  timestamp: String,
  event: String,
  Role: String,
  Telepresence: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("EngineerCraft")]
#[allow(non_snake_case)]
pub struct EngineerCraft {  
  timestamp: String,
  event: String,
  Slot: String,
  Module: String,
  Ingredients: Vec<IngredientsStruct>,
  Engineer: Option<String>,
  EngineerID: f64,
  BlueprintID: f64,
  BlueprintName: String,
  Level: f64,
  Quality: f64,
  Modifiers: Vec<ModifiersStruct>,
  ApplyExperimentalEffect: Option<String>,
  ExperimentalEffect: Option<String>,
  ExperimentalEffect_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("UseConsumable")]
#[allow(non_snake_case)]
pub struct UseConsumable {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Type: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Commander")]
#[allow(non_snake_case)]
pub struct Commander {  
  timestamp: String,
  event: String,
  FID: String,
  Name: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayDefect")]
#[allow(non_snake_case)]
pub struct PowerplayDefect {  
  timestamp: String,
  event: String,
  FromPower: String,
  ToPower: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("MissionFailed")]
#[allow(non_snake_case)]
pub struct MissionFailed {  
  timestamp: String,
  event: String,
  Name: String,
  LocalisedName: Option<String>,
  MissionID: f64,
  Fine: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CommitCrime")]
#[allow(non_snake_case)]
pub struct CommitCrime {  
  timestamp: String,
  event: String,
  CrimeType: String,
  Faction: String,
  Victim: Option<String>,
  Bounty: Option<f64>,
  Fine: Option<f64>,
  Victim_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SwitchSuitLoadout")]
#[allow(non_snake_case)]
pub struct SwitchSuitLoadout {  
  timestamp: String,
  event: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  SuitMods: Vec<String>,
  LoadoutID: f64,
  LoadoutName: String,
  Modules: Vec<ModulesStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ClearSavedGame")]
#[allow(non_snake_case)]
pub struct ClearSavedGame {  
  timestamp: String,
  event: String,
  Name: String,
  FID: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierModulePack")]
#[allow(non_snake_case)]
pub struct CarrierModulePack {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  Operation: String,
  PackTheme: String,
  PackTier: f64,
  Refund: Option<f64>,
  Cost: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("InvitedToSquadron")]
#[allow(non_snake_case)]
pub struct InvitedToSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayVoucher")]
#[allow(non_snake_case)]
pub struct PowerplayVoucher {  
  timestamp: String,
  event: String,
  Power: String,
  Systems: Vec<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("NpcCrewPaidWage")]
#[allow(non_snake_case)]
pub struct NpcCrewPaidWage {  
  timestamp: String,
  event: String,
  NpcCrewName: String,
  NpcCrewId: f64,
  Amount: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("SendText")]
#[allow(non_snake_case)]
pub struct SendText {  
  timestamp: String,
  event: String,
  To: String,
  Message: String,
  Sent: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("LeftSquadron")]
#[allow(non_snake_case)]
pub struct LeftSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Continued")]
#[allow(non_snake_case)]
pub struct Continued {  
  timestamp: String,
  event: String,
  Part: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("PVPKill")]
#[allow(non_snake_case)]
pub struct PVPKill {  
  timestamp: String,
  event: String,
  Victim: String,
  CombatRank: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("ClearImpound")]
#[allow(non_snake_case)]
pub struct ClearImpound {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  ShipID: f64,
  ShipMarketID: f64,
  MarketID: f64,
  System: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ColonisationSystemClaimRelease")]
#[allow(non_snake_case)]
pub struct ColonisationSystemClaimRelease {  
  timestamp: String,
  event: String,
  StarSystem: String,
  SystemAddress: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CommunityGoalJoin")]
#[allow(non_snake_case)]
pub struct CommunityGoalJoin {  
  timestamp: String,
  event: String,
  CGID: f64,
  Name: String,
  System: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("RepairAll")]
#[allow(non_snake_case)]
pub struct RepairAll {  
  timestamp: String,
  event: String,
  Cost: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayDeliver")]
#[allow(non_snake_case)]
pub struct PowerplayDeliver {  
  timestamp: String,
  event: String,
  Power: String,
  Type: String,
  Type_Localised: Option<String>,
  Count: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Liftoff")]
#[allow(non_snake_case)]
pub struct Liftoff {  
  timestamp: String,
  event: String,
  PlayerControlled: bool,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  StarSystem: Option<String>,
  SystemAddress: Option<f64>,
  Body: Option<String>,
  BodyID: Option<f64>,
  OnStation: Option<bool>,
  OnPlanet: Option<bool>,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  NearestDestination: Option<String>,
  NearestDestination_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("HullDamage")]
#[allow(non_snake_case)]
pub struct HullDamage {  
  timestamp: String,
  event: String,
  Health: f64,
  PlayerPilot: bool,
  Fighter: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("Resupply")]
#[allow(non_snake_case)]
pub struct Resupply {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("SharedBookmarkToSquadron")]
#[allow(non_snake_case)]
pub struct SharedBookmarkToSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ReceiveText")]
#[allow(non_snake_case)]
pub struct ReceiveText {  
  timestamp: String,
  event: String,
  From: String,
  Message: String,
  Message_Localised: Option<String>,
  Channel: String,
  From_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DataScanned")]
#[allow(non_snake_case)]
pub struct DataScanned {  
  timestamp: String,
  event: String,
  Type: String,
  Type_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellSuit")]
#[allow(non_snake_case)]
pub struct SellSuit {  
  timestamp: String,
  event: String,
  SuitID: f64,
  SuitMods: Vec<String>,
  Name: String,
  Name_Localised: Option<String>,
  Price: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("HeatDamage")]
#[allow(non_snake_case)]
pub struct HeatDamage {  
  timestamp: String,
  event: String,
  ID: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FetchRemoteModule")]
#[allow(non_snake_case)]
pub struct FetchRemoteModule {  
  timestamp: String,
  event: String,
  StorageSlot: f64,
  StoredItem: String,
  StoredItem_Localised: Option<String>,
  ServerId: f64,
  TransferCost: f64,
  TransferTime: f64,
  Ship: String,
  ShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierDecommission")]
#[allow(non_snake_case)]
pub struct CarrierDecommission {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  ScrapRefund: f64,
  ScrapTime: f64,
  CarrierType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CargoTransfer")]
#[allow(non_snake_case)]
pub struct CargoTransfer {  
  timestamp: String,
  event: String,
  Transfers: Vec<TransfersStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayMerits")]
#[allow(non_snake_case)]
pub struct PowerplayMerits {  
  timestamp: String,
  event: String,
  Power: String,
  MeritsGained: f64,
  TotalMerits: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("PayBounties")]
#[allow(non_snake_case)]
pub struct PayBounties {  
  timestamp: String,
  event: String,
  Amount: f64,
  AllFines: Option<bool>,
  ShipID: f64,
  BrokerPercentage: Option<f64>,
  Faction: Option<String>,
  Faction_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SellExplorationData")]
#[allow(non_snake_case)]
pub struct SellExplorationData {  
  timestamp: String,
  event: String,
  Systems: Vec<String>,
  Discovered: Vec<String>,
  BaseValue: f64,
  Bonus: f64,
  TotalEarnings: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierBankTransfer")]
#[allow(non_snake_case)]
pub struct CarrierBankTransfer {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  Deposit: Option<f64>,
  Withdraw: Option<f64>,
  PlayerBalance: f64,
  CarrierBalance: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewAssign")]
#[allow(non_snake_case)]
pub struct CrewAssign {  
  timestamp: String,
  event: String,
  Name: String,
  CrewID: f64,
  Role: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ColonisationBeaconDeployed")]
#[allow(non_snake_case)]
pub struct ColonisationBeaconDeployed {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ApproachBody")]
#[allow(non_snake_case)]
pub struct ApproachBody {  
  timestamp: String,
  event: String,
  StarSystem: String,
  SystemAddress: f64,
  Body: String,
  BodyID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("SupercruiseEntry")]
#[allow(non_snake_case)]
pub struct SupercruiseEntry {  
  timestamp: String,
  event: String,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  StarSystem: String,
  SystemAddress: f64,
  Wanted: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DatalinkVoucher")]
#[allow(non_snake_case)]
pub struct DatalinkVoucher {  
  timestamp: String,
  event: String,
  Reward: f64,
  VictimFaction: String,
  PayeeFaction: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuySuit")]
#[allow(non_snake_case)]
pub struct BuySuit {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Price: f64,
  SuitID: f64,
  SuitMods: Vec<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShipyardSwap")]
#[allow(non_snake_case)]
pub struct ShipyardSwap {  
  timestamp: String,
  event: String,
  ShipType: String,
  ShipType_Localised: Option<String>,
  ShipID: f64,
  StoreOldShip: String,
  StoreShipID: f64,
  MarketID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("EndCrewSession")]
#[allow(non_snake_case)]
pub struct EndCrewSession {  
  timestamp: String,
  event: String,
  OnCrime: bool,
  Telepresence: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayVote")]
#[allow(non_snake_case)]
pub struct PowerplayVote {  
  timestamp: String,
  event: String,
  Power: String,
  Votes: f64,
  VoteToConsolidate: f64,
  System: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("MaterialDiscarded")]
#[allow(non_snake_case)]
pub struct MaterialDiscarded {  
  timestamp: String,
  event: String,
  Category: String,
  Name: String,
  Count: f64,
  Name_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("AfmuRepairs")]
#[allow(non_snake_case)]
pub struct AfmuRepairs {  
  timestamp: String,
  event: String,
  Module: String,
  Module_Localised: Option<String>,
  FullyRepaired: bool,
  Health: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("KickCrewMember")]
#[allow(non_snake_case)]
pub struct KickCrewMember {  
  timestamp: String,
  event: String,
  Crew: String,
  OnCrime: bool,
  Telepresence: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierBuy")]
#[allow(non_snake_case)]
pub struct CarrierBuy {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  BoughtAtMarket: f64,
  Location: String,
  SystemAddress: f64,
  Price: f64,
  Variant: String,
  Callsign: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ShieldState")]
#[allow(non_snake_case)]
pub struct ShieldState {  
  timestamp: String,
  event: String,
  ShieldsUp: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("MaterialCollected")]
#[allow(non_snake_case)]
pub struct MaterialCollected {  
  timestamp: String,
  event: String,
  Category: String,
  Name: String,
  Count: f64,
  Name_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("PayFines")]
#[allow(non_snake_case)]
pub struct PayFines {  
  timestamp: String,
  event: String,
  Amount: f64,
  AllFines: Option<bool>,
  ShipID: f64,
  BrokerPercentage: Option<f64>,
  Faction: Option<String>,
  Faction_Localised: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("ModuleSell")]
#[allow(non_snake_case)]
pub struct ModuleSell {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Slot: String,
  SellItem: String,
  SellItem_Localised: Option<String>,
  SellPrice: f64,
  Ship: String,
  ShipID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("LoadoutEquipModule")]
#[allow(non_snake_case)]
pub struct LoadoutEquipModule {  
  timestamp: String,
  event: String,
  LoadoutName: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  LoadoutID: f64,
  SlotName: String,
  ModuleName: String,
  ModuleName_Localised: Option<String>,
  Class: f64,
  WeaponMods: Vec<String>,
  SuitModuleID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CollectItems")]
#[allow(non_snake_case)]
pub struct CollectItems {  
  timestamp: String,
  event: String,
  Name: String,
  Name_Localised: Option<String>,
  Type: String,
  OwnerID: f64,
  Count: f64,
  Stolen: bool,
}
#[derive(Clone, Debug, Event)]
#[event_name("EngineerProgress")]
#[allow(non_snake_case)]
pub struct EngineerProgress {  
  timestamp: String,
  event: String,
  Engineers: Option<Vec<EngineersStruct>>,
  Engineer: Option<String>,
  EngineerID: Option<f64>,
  Progress: Option<String>,
  Rank: Option<f64>,
  RankProgress: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("NewCommander")]
#[allow(non_snake_case)]
pub struct NewCommander {  
  timestamp: String,
  event: String,
  Name: String,
  FID: String,
  Package: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CommunityGoalDiscard")]
#[allow(non_snake_case)]
pub struct CommunityGoalDiscard {  
  timestamp: String,
  event: String,
  CGID: f64,
  Name: String,
  System: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("StoredShips")]
#[allow(non_snake_case)]
pub struct StoredShips {  
  timestamp: String,
  event: String,
  StationName: String,
  MarketID: f64,
  StarSystem: String,
  ShipsHere: Vec<ShipsHereStruct>,
  ShipsRemote: Vec<ShipsRemoteStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CrewMemberQuits")]
#[allow(non_snake_case)]
pub struct CrewMemberQuits {  
  timestamp: String,
  event: String,
  Telepresence: Option<bool>,
  Crew: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierNameChange")]
#[allow(non_snake_case)]
pub struct CarrierNameChange {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  Name: String,
  Callsign: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("RefuelAll")]
#[allow(non_snake_case)]
pub struct RefuelAll {  
  timestamp: String,
  event: String,
  Cost: f64,
  Amount: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("BuyExplorationData")]
#[allow(non_snake_case)]
pub struct BuyExplorationData {  
  timestamp: String,
  event: String,
  System: String,
  Cost: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierDockingPermission")]
#[allow(non_snake_case)]
pub struct CarrierDockingPermission {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  DockingAccess: String,
  AllowNotorious: bool,
  CarrierType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierJumpCancelled")]
#[allow(non_snake_case)]
pub struct CarrierJumpCancelled {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("EngineerLegacyConvert")]
#[allow(non_snake_case)]
pub struct EngineerLegacyConvert {  
  timestamp: String,
  event: String,
  Slot: String,
  Module: String,
  IsPreview: bool,
  Engineer: String,
  EngineerID: f64,
  BlueprintID: f64,
  BlueprintName: String,
  Level: f64,
  Quality: f64,
  Modifiers: Vec<ModifiersStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierJump")]
#[allow(non_snake_case)]
pub struct CarrierJump {  
  timestamp: String,
  event: String,
  Docked: bool,
  OnFoot: Option<bool>,
  StationName: String,
  StationType: String,
  MarketID: f64,
  StationFaction: Option<StationFactionStruct>,
  StationGovernment: String,
  StationGovernment_Localised: Option<String>,
  StationServices: Option<Vec<String>>,
  StationEconomy: String,
  StationEconomy_Localised: Option<String>,
  StationEconomies: Option<Vec<StationEconomiesStruct>>,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
  Wanted: Option<bool>,
  StarSystem: String,
  SystemAddress: f64,
  StarPos: Vec<f64>,
  SystemAllegiance: String,
  SystemEconomy: String,
  SystemEconomy_Localised: Option<String>,
  SystemSecondEconomy: String,
  SystemSecondEconomy_Localised: Option<String>,
  SystemGovernment: String,
  SystemGovernment_Localised: Option<String>,
  SystemSecurity: String,
  SystemSecurity_Localised: Option<String>,
  Population: f64,
  Body: String,
  BodyID: f64,
  BodyType: String,
  Factions: Option<Vec<FactionsStruct>>,
  SystemFaction: Option<SystemFactionStruct>,
  Conflicts: Option<Vec<ConflictsStruct>>,
  ThargoidWar: Option<ThargoidWarStruct>,
  Powers: Option<Vec<String>>,
  ControllingPower: Option<String>,
  PowerplayState: Option<String>,
  PowerplayStateControlProgress: Option<f64>,
  PowerplayStateReinforcement: Option<f64>,
  PowerplayStateUndermining: Option<f64>,
  PowerplayConflictProgress: Option<Vec<PowerplayConflictProgressStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("LoadGame")]
#[allow(non_snake_case)]
pub struct LoadGame {  
  timestamp: String,
  event: String,
  FID: String,
  Commander: String,
  Horizons: bool,
  Odyssey: Option<bool>,
  Ship: Option<String>,
  Ship_Localised: Option<String>,
  ShipID: Option<f64>,
  ShipName: Option<String>,
  ShipIdent: Option<String>,
  FuelLevel: Option<f64>,
  FuelCapacity: Option<f64>,
  GameMode: Option<String>,
  Credits: f64,
  Loan: f64,
  language: Option<String>,
  gameversion: Option<String>,
  build: Option<String>,
  Group: Option<String>,
  StartLanded: Option<bool>,
  StartDead: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("SquadronCreated")]
#[allow(non_snake_case)]
pub struct SquadronCreated {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("RenameSuitLoadout")]
#[allow(non_snake_case)]
pub struct RenameSuitLoadout {  
  timestamp: String,
  event: String,
  SuitID: f64,
  SuitName: String,
  SuitName_Localised: Option<String>,
  LoadoutID: f64,
  LoadoutName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Market")]
#[allow(non_snake_case)]
pub struct Market {  
  timestamp: String,
  event: String,
  MarketID: f64,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
  CarrierDockingAccess: Option<String>,
  StarSystem: String,
  Items: Option<Vec<ItemsStruct>>,
}
#[derive(Clone, Debug, Event)]
#[event_name("PowerplayFastTrack")]
#[allow(non_snake_case)]
pub struct PowerplayFastTrack {  
  timestamp: String,
  event: String,
  Power: String,
  Cost: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("WingInvite")]
#[allow(non_snake_case)]
pub struct WingInvite {  
  timestamp: String,
  event: String,
  Name: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("SearchAndRescue")]
#[allow(non_snake_case)]
pub struct SearchAndRescue {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
  Reward: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Statistics")]
#[allow(non_snake_case)]
pub struct Statistics {  
  timestamp: String,
  event: String,
  Bank_Account: Bank_AccountStruct,
  Combat: CombatStruct,
  Crime: CrimeStruct,
  Smuggling: SmugglingStruct,
  Trading: TradingStruct,
  Mining: MiningStruct,
  Exploration: ExplorationStruct,
  Passengers: PassengersStruct,
  Search_And_Rescue: Search_And_RescueStruct,
  Crafting: Option<CraftingStruct>,
  Crew: Option<CrewStruct>,
  Multicrew: Option<MulticrewStruct>,
  Material_Trader_Stats: Option<Material_Trader_StatsStruct>,
  FLEETCARRIER: Option<FLEETCARRIERStruct>,
  Exobiology: Option<ExobiologyStruct>,
  TG_ENCOUNTERS: Option<TG_ENCOUNTERSStruct>,
  CQC: Option<CQCStruct>,
  Squadron: Option<SquadronStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockingDenied")]
#[allow(non_snake_case)]
pub struct DockingDenied {  
  timestamp: String,
  event: String,
  Reason: String,
  MarketID: f64,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("ColonisationContribution")]
#[allow(non_snake_case)]
pub struct ColonisationContribution {  
  timestamp: String,
  event: String,
  MarketID: f64,
  Contributions: Vec<ContributionsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CarrierTradeOrder")]
#[allow(non_snake_case)]
pub struct CarrierTradeOrder {  
  timestamp: String,
  event: String,
  CarrierID: f64,
  CarrierType: Option<String>,
  BlackMarket: bool,
  Commodity: String,
  Commodity_Localised: Option<String>,
  PurchaseOrder: Option<f64>,
  SaleOrder: Option<f64>,
  CancelTrade: Option<bool>,
  Price: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("FSSAllBodiesFound")]
#[allow(non_snake_case)]
pub struct FSSAllBodiesFound {  
  timestamp: String,
  event: String,
  SystemName: String,
  SystemAddress: f64,
  Count: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("WingJoin")]
#[allow(non_snake_case)]
pub struct WingJoin {  
  timestamp: String,
  event: String,
  Others: Vec<String>,
}
#[derive(Clone, Debug, Event)]
#[event_name("TradeMicroResources")]
#[allow(non_snake_case)]
pub struct TradeMicroResources {  
  timestamp: String,
  event: String,
  Offered: Vec<OfferedStruct>,
  TotalCount: f64,
  Received: String,
  Received_Localised: Option<String>,
  Count: f64,
  Category: String,
  MarketID: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("CommunityGoalReward")]
#[allow(non_snake_case)]
pub struct CommunityGoalReward {  
  timestamp: String,
  event: String,
  CGID: f64,
  Name: String,
  System: String,
  Reward: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Shutdown")]
#[allow(non_snake_case)]
pub struct Shutdown {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Screenshot")]
#[allow(non_snake_case)]
pub struct Screenshot {  
  timestamp: String,
  event: String,
  Filename: String,
  Width: f64,
  Height: f64,
  System: Option<String>,
  Body: Option<String>,
  Latitude: Option<f64>,
  Longitude: Option<f64>,
  Altitude: Option<f64>,
  Heading: Option<f64>,
}
#[derive(Clone, Debug, Event)]
#[event_name("DockingCancelled")]
#[allow(non_snake_case)]
pub struct DockingCancelled {  
  timestamp: String,
  event: String,
  MarketID: f64,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("WingLeave")]
#[allow(non_snake_case)]
pub struct WingLeave {  
  timestamp: String,
  event: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("TechnologyBroker")]
#[allow(non_snake_case)]
pub struct TechnologyBroker {  
  timestamp: String,
  event: String,
  BrokerType: String,
  MarketID: f64,
  ItemsUnlocked: Vec<ItemsUnlockedStruct>,
  Commodities: Vec<CommoditiesStruct>,
  Materials: Vec<MaterialsStruct>,
}
#[derive(Clone, Debug, Event)]
#[event_name("JoinedSquadron")]
#[allow(non_snake_case)]
pub struct JoinedSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("Undocked")]
#[allow(non_snake_case)]
pub struct Undocked {  
  timestamp: String,
  event: String,
  StationName: String,
  StationName_Localised: Option<String>,
  StationType: String,
  MarketID: f64,
  Taxi: Option<bool>,
  Multicrew: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("CancelDropship")]
#[allow(non_snake_case)]
pub struct CancelDropship {  
  timestamp: String,
  event: String,
  Refund: f64,
}
#[derive(Clone, Debug, Event)]
#[event_name("Loadout")]
#[allow(non_snake_case)]
pub struct Loadout {  
  timestamp: String,
  event: String,
  Ship: String,
  ShipID: f64,
  ShipName: String,
  ShipIdent: String,
  HullValue: Option<f64>,
  ModulesValue: Option<f64>,
  HullHealth: f64,
  UnladenMass: f64,
  CargoCapacity: f64,
  MaxJumpRange: f64,
  FuelCapacity: FuelCapacityStruct,
  Rebuy: f64,
  Modules: Vec<ModulesStruct>,
  Hot: Option<bool>,
}
#[derive(Clone, Debug, Event)]
#[event_name("KickedFromSquadron")]
#[allow(non_snake_case)]
pub struct KickedFromSquadron {  
  timestamp: String,
  event: String,
  SquadronID: Option<f64>,
  SquadronName: String,
}
#[derive(Clone, Debug, Event)]
#[event_name("LaunchDrone")]
#[allow(non_snake_case)]
pub struct LaunchDrone {  
  timestamp: String,
  event: String,
  Type: String,
}
#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ItemCommonStruct {  
  Name: String,
  Name_Localised: Option<String>,
  OwnerID: f64,
  MissionID: Option<f64>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ComponentCommonStruct {  
  Name: String,
  OwnerID: f64,
  Count: f64,
  Name_Localised: Option<String>,
  MissionID: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ConsumableCommonStruct {  
  Name: String,
  Name_Localised: Option<String>,
  OwnerID: f64,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct DataCommonStruct {  
  Name: String,
  OwnerID: f64,
  MissionID: Option<f64>,
  Count: f64,
  Name_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ChangeEntryCommonStruct {  
  Name: String,
  Name_Localised: Option<String>,
  OwnerID: f64,
  Count: f64,
  Type: String,
  MissionID: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct StationFactionStruct {  
  Name: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct StationEconomiesStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Proportion: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct LandingPadsStruct {  
  Small: f64,
  Medium: f64,
  Large: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct SignalsStruct {  
  Type: String,
  Type_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct GenusesStruct {  
  Genus: String,
  Genus_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FactionsStruct {  
  Name: String,
  FactionState: String,
  Government: String,
  Influence: f64,
  Allegiance: String,
  Happiness: String,
  Happiness_Localised: Option<String>,
  HappiestSystem: Option<bool>,
  MyReputation: f64,
  PendingStates: Option<Vec<PendingStatesStruct>>,
  ActiveStates: Option<Vec<ActiveStatesStruct>>,
  SquadronFaction: Option<bool>,
  HomeSystem: Option<bool>,
  RecoveringStates: Option<Vec<RecoveringStatesStruct>>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct SystemFactionStruct {  
  Name: String,
  FactionState: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct PowerplayConflictProgressStruct {  
  Power: String,
  ConflictProgress: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ConflictsStruct {  
  WarType: String,
  Status: String,
  Faction1: Faction1Struct,
  Faction2: Faction2Struct,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ThargoidWarStruct {  
  CurrentState: String,
  NextStateSuccess: Option<String>,
  NextStateFailure: Option<String>,
  SuccessStateReached: bool,
  WarProgress: Option<f64>,
  RemainingPorts: Option<f64>,
  EstimatedRemainingTime: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct RouteStruct {  
  StarSystem: String,
  SystemAddress: f64,
  StarPos: Vec<f64>,
  StarClass: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct DiscoveredStruct {  
  SystemName: String,
  SystemName_Localised: Option<String>,
  NumBodies: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct BioDataStruct {  
  Genus: String,
  Genus_Localised: Option<String>,
  Species: String,
  Species_Localised: Option<String>,
  Variant: Option<String>,
  Variant_Localised: Option<String>,
  Value: f64,
  Bonus: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ResourcesRequiredStruct {  
  Name: String,
  Name_Localised: String,
  RequiredAmount: f64,
  ProvidedAmount: f64,
  Payment: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct MaterialsStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
  Category: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct MicroResourcesStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Category: String,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ItemsStruct {  
  id: f64,
  Name: String,
  Name_Localised: Option<String>,
  Category: String,
  Category_Localised: Option<String>,
  BuyPrice: f64,
  SellPrice: f64,
  MeanPrice: f64,
  StockBracket: f64,
  DemandBracket: f64,
  Stock: f64,
  Demand: f64,
  Consumer: bool,
  Producer: bool,
  Rare: bool,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ComponentsStruct {  
  Name: String,
  Name_Localised: Option<String>,
  OwnerID: f64,
  Count: f64,
  MissionID: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ConsumablesStruct {  
  Name: String,
  Name_Localised: Option<String>,
  OwnerID: f64,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct DataStruct {  
  Name: String,
  Name_Localised: Option<String>,
  OwnerID: f64,
  Count: f64,
  MissionID: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct KillersStruct {  
  KillerName: Option<String>,
  KillerShip: Option<String>,
  KillerRank: Option<String>,
  KillerName_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ModulesStruct {  
  Slot: String,
  Item: String,
  On: bool,
  Priority: f64,
  AmmoInClip: Option<f64>,
  AmmoInHopper: Option<f64>,
  Health: f64,
  Value: Option<f64>,
  Engineering: Option<EngineeringStruct>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct PriceListStruct {  
  id: f64,
  ShipType: String,
  ShipPrice: f64,
  ShipType_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CrewStruct {  
  NpcCrew_TotalWages: Option<f64>,
  NpcCrew_Hired: Option<f64>,
  NpcCrew_Fired: Option<f64>,
  NpcCrew_Died: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct TransfersStruct {  
  Type: String,
  Type_Localised: Option<String>,
  Count: f64,
  Direction: String,
  MissionID: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct RewardsStruct {  
  Faction: String,
  Reward: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CommodityRewardStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct MaterialsRewardStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Category: String,
  Category_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FactionEffectsStruct {  
  Faction: String,
  Effects: Vec<EffectsStruct>,
  Influence: Vec<InfluenceStruct>,
  ReputationTrend: String,
  Reputation: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CurrentGoalsStruct {  
  CGID: f64,
  Title: String,
  SystemName: String,
  MarketName: String,
  Expiry: String,
  IsComplete: bool,
  CurrentTotal: f64,
  PlayerContribution: f64,
  NumContributors: f64,
  TopTier: TopTierStruct,
  TopRankSize: Option<f64>,
  PlayerInTopRank: Option<bool>,
  TierReached: Option<String>,
  PlayerPercentileBand: f64,
  Bonus: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct InventoryStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
  Stolen: f64,
  MissionID: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct RawStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ManufacturedStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct EncodedStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct SpaceUsageStruct {  
  TotalCapacity: f64,
  Crew: f64,
  Cargo: f64,
  CargoSpaceReserved: f64,
  ShipPacks: f64,
  ModulePacks: f64,
  FreeSpace: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FinanceStruct {  
  CarrierBalance: f64,
  ReserveBalance: f64,
  AvailableBalance: f64,
  ReservePercent: Option<f64>,
  TaxRate_shipyard: Option<f64>,
  TaxRate_rearm: Option<f64>,
  TaxRate_outfitting: Option<f64>,
  TaxRate_refuel: Option<f64>,
  TaxRate_repair: Option<f64>,
  TaxRate_pioneersupplies: Option<f64>,
  TaxRate: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ShipPacksStruct {  
  PackTheme: String,
  PackTier: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ModulePacksStruct {  
  PackTheme: String,
  PackTier: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ResourcesStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct PaidStruct {  
  Material: String,
  Material_Localised: Option<String>,
  Category: String,
  Quantity: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ReceivedStruct {  
  Material: String,
  Material_Localised: Option<String>,
  Category: String,
  Quantity: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ParentsStruct {  
  Star: Option<f64>,
  Null: Option<f64>,
  Ring: Option<f64>,
  Planet: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct AtmosphereCompositionStruct {  
  Name: String,
  Percent: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CompositionStruct {  
  Ice: f64,
  Rock: f64,
  Metal: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct RingsStruct {  
  Name: String,
  RingClass: String,
  MassMT: f64,
  InnerRad: f64,
  OuterRad: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ActiveStruct {  
  MissionID: f64,
  Name: String,
  Name_Localised: Option<String>,
  PassengerMission: bool,
  Expires: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FailedStruct {  
  MissionID: f64,
  Name: String,
  Name_Localised: Option<String>,
  PassengerMission: bool,
  Expires: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CompleteStruct {  
  MissionID: f64,
  Name: String,
  Name_Localised: Option<String>,
  PassengerMission: bool,
  Expires: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FuelStruct {  
  FuelMain: f64,
  FuelReservoir: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct DestinationStruct {  
  System: f64,
  Body: f64,
  Name: String,
  Name_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ManifestStruct {  
  MissionID: f64,
  Type: String,
  VIP: bool,
  Wanted: bool,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct IngredientsStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ModifiersStruct {  
  Label: String,
  Value: f64,
  OriginalValue: f64,
  LessIsGood: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct EngineersStruct {  
  Engineer: String,
  EngineerID: f64,
  Progress: String,
  RankProgress: Option<f64>,
  Rank: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ShipsHereStruct {  
  ShipID: f64,
  ShipType: String,
  Value: f64,
  Hot: bool,
  ShipType_Localised: Option<String>,
  Name: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ShipsRemoteStruct {  
  ShipID: f64,
  ShipType: String,
  Name: Option<String>,
  StarSystem: Option<String>,
  ShipMarketID: Option<f64>,
  TransferPrice: Option<f64>,
  TransferTime: Option<f64>,
  Value: f64,
  Hot: bool,
  ShipType_Localised: Option<String>,
  InTransit: Option<bool>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct Bank_AccountStruct {  
  Current_Wealth: f64,
  Spent_On_Ships: f64,
  Spent_On_Outfitting: f64,
  Spent_On_Repairs: f64,
  Spent_On_Fuel: f64,
  Spent_On_Ammo_Consumables: f64,
  Insurance_Claims: f64,
  Spent_On_Insurance: f64,
  Owned_Ship_Count: Option<f64>,
  Spent_On_Suits: Option<f64>,
  Spent_On_Weapons: Option<f64>,
  Spent_On_Suit_Consumables: Option<f64>,
  Suits_Owned: Option<f64>,
  Weapons_Owned: Option<f64>,
  Spent_On_Premium_Stock: Option<f64>,
  Premium_Stock_Bought: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CombatStruct {  
  Bounties_Claimed: f64,
  Bounty_Hunting_Profit: f64,
  Combat_Bonds: f64,
  Combat_Bond_Profits: f64,
  Assassinations: f64,
  Assassination_Profits: f64,
  Highest_Single_Reward: f64,
  Skimmers_Killed: Option<f64>,
  OnFoot_Combat_Bonds: Option<f64>,
  OnFoot_Combat_Bonds_Profits: Option<f64>,
  OnFoot_Vehicles_Destroyed: Option<f64>,
  OnFoot_Ships_Destroyed: Option<f64>,
  Dropships_Taken: Option<f64>,
  Dropships_Booked: Option<f64>,
  Dropships_Cancelled: Option<f64>,
  ConflictZone_High: Option<f64>,
  ConflictZone_Medium: Option<f64>,
  ConflictZone_Low: Option<f64>,
  ConflictZone_Total: Option<f64>,
  ConflictZone_High_Wins: Option<f64>,
  ConflictZone_Medium_Wins: Option<f64>,
  ConflictZone_Low_Wins: Option<f64>,
  ConflictZone_Total_Wins: Option<f64>,
  Settlement_Defended: Option<f64>,
  Settlement_Conquered: Option<f64>,
  OnFoot_Skimmers_Killed: Option<f64>,
  OnFoot_Scavs_Killed: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CrimeStruct {  
  Notoriety: Option<f64>,
  Fines: f64,
  Total_Fines: f64,
  Bounties_Received: f64,
  Total_Bounties: f64,
  Highest_Bounty: f64,
  Malware_Uploaded: Option<f64>,
  Settlements_State_Shutdown: Option<f64>,
  Production_Sabotage: Option<f64>,
  Production_Theft: Option<f64>,
  Total_Murders: Option<f64>,
  Citizens_Murdered: Option<f64>,
  Omnipol_Murdered: Option<f64>,
  Guards_Murdered: Option<f64>,
  Data_Stolen: Option<f64>,
  Goods_Stolen: Option<f64>,
  Sample_Stolen: Option<f64>,
  Total_Stolen: Option<f64>,
  Turrets_Destroyed: Option<f64>,
  Turrets_Overloaded: Option<f64>,
  Turrets_Total: Option<f64>,
  Value_Stolen_StateChange: Option<f64>,
  Profiles_Cloned: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct SmugglingStruct {  
  Black_Markets_Traded_With: f64,
  Black_Markets_Profits: f64,
  Resources_Smuggled: f64,
  Average_Profit: f64,
  Highest_Single_Transaction: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct TradingStruct {  
  Markets_Traded_With: f64,
  Market_Profits: f64,
  Resources_Traded: f64,
  Average_Profit: f64,
  Highest_Single_Transaction: f64,
  Data_Sold: Option<f64>,
  Goods_Sold: Option<f64>,
  Assets_Sold: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct MiningStruct {  
  Mining_Profits: f64,
  Quantity_Mined: f64,
  Materials_Collected: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ExplorationStruct {  
  Systems_Visited: f64,
  Exploration_Profits: f64,
  Planets_Scanned_To_Level_2: f64,
  Planets_Scanned_To_Level_3: f64,
  Efficient_Scans: Option<f64>,
  Highest_Payout: f64,
  Total_Hyperspace_Distance: f64,
  Total_Hyperspace_Jumps: f64,
  Greatest_Distance_From_Start: f64,
  Time_Played: f64,
  OnFoot_Distance_Travelled: Option<f64>,
  Shuttle_Journeys: Option<f64>,
  Shuttle_Distance_Travelled: Option<f64>,
  Spent_On_Shuttles: Option<f64>,
  First_Footfalls: Option<f64>,
  Planet_Footfalls: Option<f64>,
  Settlements_Visited: Option<f64>,
  Fuel_Scooped: Option<f64>,
  Fuel_Purchased: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct PassengersStruct {  
  Passengers_Missions_Accepted: Option<f64>,
  Passengers_Missions_Disgruntled: Option<f64>,
  Passengers_Missions_Bulk: f64,
  Passengers_Missions_VIP: f64,
  Passengers_Missions_Delivered: f64,
  Passengers_Missions_Ejected: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct Search_And_RescueStruct {  
  SearchRescue_Traded: f64,
  SearchRescue_Profit: f64,
  SearchRescue_Count: f64,
  Salvage_Legal_POI: Option<f64>,
  Salvage_Legal_Settlements: Option<f64>,
  Salvage_Illegal_POI: Option<f64>,
  Salvage_Illegal_Settlements: Option<f64>,
  Maglocks_Opened: Option<f64>,
  Panels_Opened: Option<f64>,
  Settlements_State_FireOut: Option<f64>,
  Settlements_State_Reboot: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CraftingStruct {  
  Count_Of_Used_Engineers: f64,
  Recipes_Generated: f64,
  Recipes_Generated_Rank_1: f64,
  Recipes_Generated_Rank_2: f64,
  Recipes_Generated_Rank_3: f64,
  Recipes_Generated_Rank_4: f64,
  Recipes_Generated_Rank_5: f64,
  Suit_Mods_Applied: Option<f64>,
  Weapon_Mods_Applied: Option<f64>,
  Suits_Upgraded: Option<f64>,
  Weapons_Upgraded: Option<f64>,
  Suits_Upgraded_Full: Option<f64>,
  Weapons_Upgraded_Full: Option<f64>,
  Suit_Mods_Applied_Full: Option<f64>,
  Weapon_Mods_Applied_Full: Option<f64>,
  Spent_On_Crafting: Option<f64>,
  Recipes_Applied: Option<f64>,
  Recipes_Applied_Rank_1: Option<f64>,
  Recipes_Applied_Rank_2: Option<f64>,
  Recipes_Applied_Rank_3: Option<f64>,
  Recipes_Applied_Rank_4: Option<f64>,
  Recipes_Applied_Rank_5: Option<f64>,
  Recipes_Applied_On_Previously_Modified_Modules: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct MulticrewStruct {  
  Multicrew_Time_Total: f64,
  Multicrew_Gunner_Time_Total: f64,
  Multicrew_Fighter_Time_Total: f64,
  Multicrew_Credits_Total: f64,
  Multicrew_Fines_Total: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct Material_Trader_StatsStruct {  
  Trades_Completed: f64,
  Materials_Traded: f64,
  Encoded_Materials_Traded: Option<f64>,
  Raw_Materials_Traded: Option<f64>,
  Grade_1_Materials_Traded: Option<f64>,
  Grade_2_Materials_Traded: Option<f64>,
  Grade_3_Materials_Traded: Option<f64>,
  Grade_4_Materials_Traded: Option<f64>,
  Grade_5_Materials_Traded: Option<f64>,
  Assets_Traded_In: Option<f64>,
  Assets_Traded_Out: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FLEETCARRIERStruct {  
  FLEETCARRIER_EXPORT_TOTAL: f64,
  FLEETCARRIER_IMPORT_TOTAL: f64,
  FLEETCARRIER_TRADEPROFIT_TOTAL: f64,
  FLEETCARRIER_TRADESPEND_TOTAL: f64,
  FLEETCARRIER_STOLENPROFIT_TOTAL: f64,
  FLEETCARRIER_STOLENSPEND_TOTAL: f64,
  FLEETCARRIER_DISTANCE_TRAVELLED: FLEETCARRIER_DISTANCE_TRAVELLEDEnum,
  FLEETCARRIER_TOTAL_JUMPS: f64,
  FLEETCARRIER_SHIPYARD_SOLD: f64,
  FLEETCARRIER_SHIPYARD_PROFIT: f64,
  FLEETCARRIER_OUTFITTING_SOLD: f64,
  FLEETCARRIER_OUTFITTING_PROFIT: f64,
  FLEETCARRIER_REARM_TOTAL: f64,
  FLEETCARRIER_REFUEL_TOTAL: f64,
  FLEETCARRIER_REFUEL_PROFIT: f64,
  FLEETCARRIER_REPAIRS_TOTAL: f64,
  FLEETCARRIER_VOUCHERS_REDEEMED: f64,
  FLEETCARRIER_VOUCHERS_PROFIT: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ExobiologyStruct {  
  Organic_Genus_Encountered: f64,
  Organic_Species_Encountered: f64,
  Organic_Variant_Encountered: f64,
  Organic_Data_Profits: f64,
  Organic_Data: f64,
  First_Logged_Profits: f64,
  First_Logged: f64,
  Organic_Systems: f64,
  Organic_Planets: f64,
  Organic_Genus: f64,
  Organic_Species: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct TG_ENCOUNTERSStruct {  
  TG_ENCOUNTER_IMPRINT: Option<f64>,
  TG_ENCOUNTER_WAKES: Option<f64>,
  TG_ENCOUNTER_KILLED: Option<f64>,
  TG_ENCOUNTER_TOTAL: f64,
  TG_ENCOUNTER_TOTAL_LAST_SYSTEM: String,
  TG_ENCOUNTER_TOTAL_LAST_TIMESTAMP: String,
  TG_ENCOUNTER_TOTAL_LAST_SHIP: String,
  TG_SCOUT_COUNT: Option<f64>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CQCStruct {  
  CQC_Credits_Earned: Option<f64>,
  CQC_Time_Played: f64,
  CQC_KD: f64,
  CQC_Kills: f64,
  CQC_WL: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct SquadronStruct {  
  Squadron_Bank_Credits_Deposited: f64,
  Squadron_Bank_Credits_Withdrawn: f64,
  Squadron_Bank_Commodities_Deposited_Num: f64,
  Squadron_Bank_Commodities_Deposited_Value: f64,
  Squadron_Bank_Commodities_Withdrawn_Num: f64,
  Squadron_Bank_Commodities_Withdrawn_Value: f64,
  Squadron_Bank_PersonalAssets_Deposited_Num: f64,
  Squadron_Bank_PersonalAssets_Deposited_Value: f64,
  Squadron_Bank_PersonalAssets_Withdrawn_Num: f64,
  Squadron_Bank_PersonalAssets_Withdrawn_Value: f64,
  Squadron_Bank_Ships_Deposited_Num: f64,
  Squadron_Bank_Ships_Deposited_Value: f64,
  Squadron_Leaderboard_aegis_highestcontribution: f64,
  Squadron_Leaderboard_bgs_highestcontribution: f64,
  Squadron_Leaderboard_bounty_highestcontribution: f64,
  Squadron_Leaderboard_colonisation_contribution_highestcontribution: f64,
  Squadron_Leaderboard_combat_highestcontribution: f64,
  Squadron_Leaderboard_cqc_highestcontribution: f64,
  Squadron_Leaderboard_exploration_highestcontribution: f64,
  Squadron_Leaderboard_mining_highestcontribution: f64,
  Squadron_Leaderboard_powerplay_highestcontribution: f64,
  Squadron_Leaderboard_trade_highestcontribution: f64,
  Squadron_Leaderboard_trade_illicit_highestcontribution: f64,
  Squadron_Leaderboard_podiums: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ContributionsStruct {  
  Name: String,
  Name_Localised: String,
  Amount: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct OfferedStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Category: String,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ItemsUnlockedStruct {  
  Name: String,
  Name_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct CommoditiesStruct {  
  Name: String,
  Name_Localised: Option<String>,
  Count: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct FuelCapacityStruct {  
  Main: f64,
  Reserve: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct PendingStatesStruct {  
  State: String,
  Trend: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct ActiveStatesStruct {  
  State: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct RecoveringStatesStruct {  
  State: String,
  Trend: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct Faction1Struct {  
  Name: String,
  Stake: String,
  Stake_Localised: Option<String>,
  WonDays: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct Faction2Struct {  
  Name: String,
  Stake: String,
  WonDays: f64,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct EngineeringStruct {  
  EngineerID: f64,
  BlueprintID: f64,
  BlueprintName: String,
  Level: f64,
  Quality: f64,
  Modifiers: Vec<ModifiersStruct>,
  Engineer: Option<String>,
  ExperimentalEffect: Option<String>,
  ExperimentalEffect_Localised: Option<String>,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct EffectsStruct {  
  Effect: String,
  Effect_Localised: Option<String>,
  Trend: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct InfluenceStruct {  
  SystemAddress: f64,
  Trend: String,
  Influence: String,
}

#[derive(Clone, Debug, Transferable)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub struct TopTierStruct {  
  Name: String,
  Bonus: String,
}

#[derive(Clone, Debug)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
pub enum FLEETCARRIER_DISTANCE_TRAVELLEDEnum {
    Lexical(String),
    Numerical(f64),
}

impl Transferable for FLEETCARRIER_DISTANCE_TRAVELLEDEnum {
    type JsForm = JsValue;

    fn to_js<'cx>(&self, ctx: &mut Cx<'cx>) -> NeonResult<Handle<'cx, Self::JsForm>> {
        match self {
            FLEETCARRIER_DISTANCE_TRAVELLEDEnum::Lexical(val) => {
                val.to_js(ctx).map(|v| v.as_value(ctx))
            }
            FLEETCARRIER_DISTANCE_TRAVELLEDEnum::Numerical(val) => {
                val.to_js(ctx).map(|v| v.as_value(ctx))
            }
        }
    }

    fn from_js<'cx>(ctx: &mut Cx<'cx>, object: Handle<'cx, Self::JsForm>) -> NeonResult<Self>
    where
        Self: Sized,
    {
        match object.is_a::<JsNumber, _>(ctx) {
            true => Ok(Self::Numerical(object.downcast::<JsNumber, _>(ctx).unwrap().value(ctx))),
            false => object.downcast::<JsString, _>(ctx)
            .map_err(|_|ctx.throw_error::<_, &str>("INVALID CAST FLEETCARRIER_DISTANCE_TRAVELLEDEnum").unwrap_err())
            .map(|v|Self::Lexical(v.value(ctx))),
        }
    }
}
